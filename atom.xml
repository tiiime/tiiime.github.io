<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>技不如人，甘拜下风</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://invoker.me/"/>
  <updated>2025-06-29T05:04:24.384Z</updated>
  <id>https://invoker.me/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Make adb shell Great Again</title>
    <link href="https://invoker.me/make-adb-shell-great-again/"/>
    <id>https://invoker.me/make-adb-shell-great-again/</id>
    <published>2024-12-13T10:06:53.000Z</published>
    <updated>2025-06-29T05:04:24.384Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>现已提供一键部署脚本！<a href="https://github.com/tiiime/termux-setup">https://github.com/tiiime/termux-setup</a></p>
</blockquote>
<p>几分钟即可拥有一个花里胡哨的 adb shell~</p>
<p><a href="https://asciinema.org/a/xz1c6nF78SARclkAMCBxp5BLR"><br>  <img src="https://asciinema.org/a/xz1c6nF78SARclkAMCBxp5BLR.svg" alt="asciinema recording" style="pointer-events: none; user-select: none;"><br></a></p>
<p>原理就是 termux + ssh + fish shell + tmux。</p>
<h3 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h3><p>下载 <a href="https://f-droid.org/packages/com.termux/">termux</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">安装 termux.apk</span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择 china 镜像源</span></span><br><span class="line">termux-change-repo </span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新</span></span><br><span class="line">apt update &amp;&amp; apt upgrade</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 fish/tmux/openssh/bat/fd</span></span><br><span class="line">apt install fish tmux openssh fd bat</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置 fish 为默认 termux shell，输入 fish</span></span><br><span class="line">chsh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下次默认会自动进 fish，这次我们要手动进 fish</span></span><br><span class="line">fish</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 fisher https://github.com/jorgebucaran/fisher</span></span><br><span class="line">curl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish | source &amp;&amp; fisher install jorgebucaran/fisher</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 fzf，`CTRL+R` 搜索历史命令...</span></span><br><span class="line">fisher install PatrickF1/fzf.fish</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 zoxide，快速跳转 <span class="built_in">cd</span> 过的目录。z + 缩写，就能跳转目录</span></span><br><span class="line">fisher install kidonng/zoxide.fish</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改 termux 用户密码</span></span><br><span class="line">passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 ssh 服务</span></span><br><span class="line">sshd</span><br></pre></td></tr></table></figure></p>
<h3 id="使用电脑连接到手机"><a href="#使用电脑连接到手机" class="headerlink" title="使用电脑连接到手机"></a>使用电脑连接到手机</h3><p>配置工作完成，有两种方式可以在电脑上连接：  </p>
<ol>
<li>USB 连接手机. <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将 termux ssh 端口转发到电脑</span></span><br><span class="line">adb forward tcp:8022 tcp:8022</span><br><span class="line"><span class="meta">#</span><span class="bash"> 连接手机，密码就是刚才 passwd 设置的密码</span></span><br><span class="line">ssh root@localhost -p 8022</span><br></pre></td></tr></table></figure></li>
<li>局域网直连.<br>也可以直接 ssh 连手机 ip 。<h3 id="关于-tmux"><a href="#关于-tmux" class="headerlink" title="关于 tmux"></a>关于 tmux</h3>tmux 是一个超屌的工具，网上一堆介绍，简单来说就是可以在一个终端开多个窗口，同时搬更多的砖。这里放上我的快捷键配置 <code>.tmux.conf</code>。<br><code>vim ~/.tmux.conf</code> 内容见下面文件。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">set -g default-shell /data/data/com.termux/files/usr/bin/fish</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">set</span> -g default-command /usr/bin/zsh</span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置前缀为Ctrl + a</span></span><br><span class="line">set -g prefix C-a</span><br><span class="line"><span class="meta">#</span><span class="bash">解除Ctrl+b 与前缀的对应关系</span></span><br><span class="line">unbind C-b</span><br><span class="line"><span class="meta">#</span><span class="bash">up</span></span><br><span class="line">bind-key k select-pane -U</span><br><span class="line"><span class="meta">#</span><span class="bash">down</span></span><br><span class="line">bind-key j select-pane -D</span><br><span class="line"><span class="meta">#</span><span class="bash">left</span></span><br><span class="line">bind-key h select-pane -L</span><br><span class="line"><span class="meta">#</span><span class="bash">right</span></span><br><span class="line">bind-key l select-pane -R</span><br><span class="line"><span class="meta">#</span><span class="bash">copy-mode 将快捷键设置为vi 模式</span></span><br><span class="line">setw -g mode-keys vi</span><br><span class="line"><span class="meta">#</span><span class="bash"> split window</span></span><br><span class="line">unbind &#x27;&quot;&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> vertical split (prefix -)</span></span><br><span class="line">bind - splitw -v</span><br><span class="line">unbind %</span><br><span class="line">bind | splitw -h # horizontal split (prefix |)</span><br></pre></td></tr></table></figure>
<p>简单使用：</p>
<ul>
<li>输入 <code>tmux</code>，启动 tmux </li>
<li><code>CTRL+a</code>: 进入命令模式</li>
<li><code>CTRL+a</code> 之后按 <code>-</code> 垂直分割窗口</li>
<li><code>CTRL+a</code> 之后按 <code>|</code> 水平分割窗口</li>
<li><code>CTRL+a</code> 之后按上下左右，切换窗口<h3 id="关于-fish-shell-样式"><a href="#关于-fish-shell-样式" class="headerlink" title="关于 fish shell 样式"></a>关于 fish shell 样式</h3>强烈推荐 oh-my-zsh 的 <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes#ys"><code>ys</code></a> 主题，超好看。简单复刻了一个到 fish，编辑 <code>~/.config/fish/function/fish_prompt.fish</code>，具体内容见下面文件。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> fish_prompt -d <span class="string">&quot;Write out the prompt&quot;</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&#x27;%s %s @ %s in %s [%s] \n%s &#x27;</span> (set_color blue)(<span class="built_in">echo</span> \<span class="comment">#) (set_color cyan)$USER(set_color normal) (set_color green)$hostname(set_color normal) \</span></span><br><span class="line">        (set_color yellow)(prompt_pwd)(set_color normal) \</span><br><span class="line">        (<span class="built_in">echo</span> -n (date +%H:%M:%S)) \</span><br><span class="line">        (set_color red)(<span class="built_in">echo</span> \$)(set_color normal)</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h3 id="关于-root"><a href="#关于-root" class="headerlink" title="关于 root"></a>关于 root</h3><p>如果你有 root 权限，在 termux 内输入 <code>tsu</code> 即可进入 root 环境。<br>但是我们刚配置好的内容，对 root 用户是不生效的。我是用软链接把配置放到了 root 用户目录一份。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 链接 .config 目录</span></span><br><span class="line">ln -s /data/data/com.termux/files/home/.config/ /data/data/com.termux/files/home/.suroot/.config</span><br><span class="line"><span class="meta">#</span><span class="bash"> 链接 tmux 配置</span></span><br><span class="line">ln -s /data/data/com.termux/files/home/.tmux.conf /data/data/com.termux/files/home/.suroot/.tmux.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入 root</span></span><br><span class="line">tsu</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换默认 shell</span></span><br><span class="line">chsh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下次默认会自动进 fish，这次我们要手动进 fish</span></span><br><span class="line">fish</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;现已提供一键部署脚本！&lt;a href=&quot;https://github.com/tiiime/termux-setup&quot;&gt;https://github.com/tiiime/termux-setup&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="折腾" scheme="https://invoker.me/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="shell" scheme="https://invoker.me/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Make adb logcat Great Again!</title>
    <link href="https://invoker.me/make-adb-logcat-great-again/"/>
    <id>https://invoker.me/make-adb-logcat-great-again/</id>
    <published>2023-08-05T09:43:01.000Z</published>
    <updated>2025-06-29T04:49:36.614Z</updated>
    
    <content type="html"><![CDATA[<p>几年前记录过关于 lnav 的<a href="../lnav-analysis-log">使用</a>，但是一直停留在 <code>filter-in</code> / <code>filter-out</code> 这两个基础命令，最近研究 lnav 的 <a href="https://docs.lnav.org/en/latest/formats.html">format</a>，解锁了 sql query 和 <code>filter-expr</code> 操作。</p>
<p>先装一个 <a href="https://lnav.org/">lnav</a>！</p>
<ol>
<li>安装 lnav.    <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install lnav</span><br></pre></td></tr></table></figure></li>
<li>安装 lnav logcat format.   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.lnav/format/</span><br><span class="line"><span class="meta">#</span><span class="bash"> download https://github.com/aspiers/lnav-formats alogcat.json</span></span><br><span class="line">mv alogcat.json ~/.lnav/format/</span><br><span class="line">lnav -i ~/.lnav/format/alogcat.json</span><br></pre></td></tr></table></figure>
安装好之后就可以使用 <code>alogcat</code> 格式。</li>
<li>SQL 查询使用.<br>打开一个 logcat 日志: <code>adb logcat  --pid=$(adb shell pidof -s com.android.chrome) | lnav</code>。<br>按 <code>;</code> 进入 sql 查询。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> log_line,log_body <span class="keyword">FROM</span> alogcat <span class="keyword">WHERE</span> tag <span class="operator">=</span> <span class="string">&#x27;NetLogger&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>导出 sql 查询内容到 csv.<br>按 <code>:</code> 进入命令模式。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">writer-csv-to ~/path/to/file.csv</span><br></pre></td></tr></table></figure></li>
<li>使用 filter-expr 过滤日志流.<br>在日志流内，也可以使用 filter-expr 对 format 描述的 field 进行过滤。<br>按 <code>:</code> 进入命令模式，用正则过滤掉垃圾日志.    <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:filter-expr :tag NOT REGEXP &#x27;WindowManager&#x27;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几年前记录过关于 lnav 的&lt;a href=&quot;../lnav-analysis-log&quot;&gt;使用&lt;/a&gt;，但是一直停留在 &lt;code&gt;filter-in&lt;/code&gt; / &lt;code&gt;filter-out&lt;/code&gt; 这两个基础命令，最近研究 lnav 的 &lt;a href
    
    </summary>
    
      <category term="折腾" scheme="https://invoker.me/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="shell" scheme="https://invoker.me/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>2023 年用 cemu 玩塞尔达荒野之息</title>
    <link href="https://invoker.me/cemu-zelda-2023/"/>
    <id>https://invoker.me/cemu-zelda-2023/</id>
    <published>2023-04-22T12:56:26.000Z</published>
    <updated>2025-06-29T04:49:36.603Z</updated>
    
    <content type="html"><![CDATA[<p>一张六年前的 10 系显卡就能体验 4k 60 帧的塞尔达，简直不要太爽。</p>
<p>不过网上都是整合包，所以记录下在 2023 年，不用整合包，折腾 cemu 模拟器，玩 Wii U 版塞尔达的过程。</p>
<p>[TOC]</p>
<h3 id="下载游戏"><a href="#下载游戏" class="headerlink" title="下载游戏"></a>下载游戏</h3><p>安装 WiiUUSBHelper 这个工具，提供 Wii U 等 ROM 下载。<br><a href="https://github.com/FailedShack/USBHelperInstaller/releases">https://github.com/FailedShack/USBHelperInstaller/releases</a></p>
<p>首次启动程需要填一个 title url，输入 <code>titlekeys.ovh</code> 即可。<br>加载 title 信息可能需要梯子，我这里网络正常，大概几分钟同步完毕。<br>选择自己需要的区，我找到的汉化补丁是根据日版制作的，所以选择日区。  </p>
<p>然后搜索下载游戏，顺手在这里把 cemu 下载。</p>
<h3 id="安装汉化"><a href="#安装汉化" class="headerlink" title="安装汉化"></a>安装汉化</h3><p>汉化包[91WiiNS官中NS移植][简中2018-08-release][日]塞尔达传说：旷野之息[91WiiNS官中NS移植][简中2018-08-release]<br><a href="https://www.tekqart.com/thread-91496-1-1.html">https://www.tekqart.com/thread-91496-1-1.html</a></p>
<p>汉化安装方法。需要启动游戏，进游戏保存一下，才能看到相关文件夹。<br><a href="https://bbs.oldmanemu.net/thread-9306.htm">https://bbs.oldmanemu.net/thread-9306.htm</a></p>
<h3 id="配置帧率-分辨率"><a href="#配置帧率-分辨率" class="headerlink" title="配置帧率/分辨率"></a>配置帧率/分辨率</h3><p>启动游戏后，进游戏保存一下。退出全屏，在 cemu 模拟器 Options-&gt; Graphic packs-&gt; 选 zelda<br>Mod 选 fps++ 配置帧数<br>Workarounds/Graphics 选 4k</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一张六年前的 10 系显卡就能体验 4k 60 帧的塞尔达，简直不要太爽。&lt;/p&gt;
&lt;p&gt;不过网上都是整合包，所以记录下在 2023 年，不用整合包，折腾 cemu 模拟器，玩 Wii U 版塞尔达的过程。&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;下载游戏&quot;&gt;&lt;a
    
    </summary>
    
    
      <category term="emulator" scheme="https://invoker.me/tags/emulator/"/>
    
  </entry>
  
  <entry>
    <title>使用 radare2/iaito 移除 frida 检测</title>
    <link href="https://invoker.me/radare2-re-frida/"/>
    <id>https://invoker.me/radare2-re-frida/</id>
    <published>2022-12-08T08:25:05.000Z</published>
    <updated>2025-06-29T04:49:36.615Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://blog.seeflower.dev/archives/178/">eBPF on Android之使用stackplz拯救你的frida</a></p>
</blockquote>
<p>原理在引用的这篇文章里，这里主要记录下 <a href="https://github.com/radareorg/radare2">radare2</a> 的使用方法，毕竟 IDA 太贵了。</p>
<p><a href="https://github.com/radareorg/radare2">radare2</a> 是一个开源逆向框架，提供命令行工具。<a href="https://github.com/radareorg/iaito">iaito</a> 是 <a href="https://github.com/radareorg/radare2">radare2</a> 的一个 GUI 工具，开源免费，万岁。</p>
<p>接下来，有请我们今天的主角，<code>libmsaoaidsec.so</code>，看起来是 oaid 的 so，没想到是它在检测 frida。</p>
<p>步骤:</p>
<ol>
<li>定位可疑调用位置</li>
<li>找到关键检测逻辑</li>
<li>使用 <a href="https://github.com/radareorg/radare2">radare2</a> 修改 so</li>
<li>替换 so，测试 frida</li>
</ol>
<h3 id="定位可疑调用位置"><a href="#定位可疑调用位置" class="headerlink" title="定位可疑调用位置"></a>定位可疑调用位置</h3><p>挑个看得顺眼的应用，并没有特别多逆向经验，直接根据原文，找 libmsaoaidsec.so 相关日志。</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./stackplz --name com.zhihu.android stack --symbol strstr --regs --stack</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">stack_2022/12/08 06:21:05 StackMod      perf event ring buffer full, dropped 6 samples, libc.so + strstr                                                                                                            </span><br><span class="line">stack_2022/12/08 06:21:05 [libc.so + strstr] PID:10435, Comm:ZH_RxCachedThre, TID:10503, Regs:                                                                                                                      </span><br><span class="line">&#123;&quot;lr&quot;:&quot;0x6ed246da7c&quot;,&quot;pc&quot;:&quot;0x71f4897300&quot;,&quot;sp&quot;:&quot;0x6ed23447c0&quot;,&quot;x0&quot;:&quot;0x6ed23447d8&quot;,&quot;x1&quot;:&quot;0x6ed249804a&quot;,&quot;x10&quot;:&quot;0x1ea&quot;,&quot;x11&quot;:&quot;0x1&quot;,&quot;x12&quot;:&quot;0x6ed2343dda&quot;,&quot;x13&quot;:&quot;0xafbda102&quot;,&quot;x14&quot;:&quot;0x10&quot;,&quot;x15&quot;:&quot;0x0&quot;,&quot;x16&quot;:&quot;0x6ed2496ac0&quot;</span><br><span class="line">Stackinfo:                                                                                                                                </span><br><span class="line">  #00 pc 0000000000095300  /apex/com.android.runtime/lib64/bionic/libc.so (strstr)                                                        </span><br><span class="line">  #01 pc 000000000001aa78  /data/app/~~EpW7Q_NNKlVh9bZXN1dcWQ==/com.zhihu.android-Zt48AaNHSi4nYrZ8qtxQvg==/lib/arm64/libmsaoaidsec.so                                                                               </span><br><span class="line">  #02 pc 000000000001b870  /data/app/~~EpW7Q_NNKlVh9bZXN1dcWQ==/com.zhihu.android-Zt48AaNHSi4nYrZ8qtxQvg==/lib/arm64/libmsaoaidsec.so                                                                               </span><br><span class="line">  #03 pc 00000000000b1790  /apex/com.android.runtime/lib64/bionic/libc.so (__pthread_start(void*)+204)                                                                                                              </span><br><span class="line">  #04 pc 00000000000511ac  /apex/com.android.runtime/lib64/bionic/libc.so (__start_thread+64)                                                                                                                       </span><br><span class="line">                                                                                                                                                                                                                    </span><br><span class="line">stack_2022/12/08 06:21:05 [libc.so + strstr] PID:10435, Comm:ZH_RxCachedThre, TID:10503, Regs:                                                                                                                      </span><br><span class="line">&#123;&quot;lr&quot;:&quot;0x6ed246da8c&quot;,&quot;pc&quot;:&quot;0x71f4897300&quot;,&quot;sp&quot;:&quot;0x6ed23447c0&quot;,&quot;x0&quot;:&quot;0x6ed23447d8&quot;,&quot;x1&quot;:&quot;0x6ed2498056&quot;,&quot;x10&quot;:&quot;0x1ea&quot;,&quot;x11&quot;:&quot;0x1&quot;,&quot;x12&quot;:&quot;0x6ed2343dda&quot;,&quot;x13&quot;:&quot;0xafbda102&quot;,&quot;x14&quot;:&quot;0x10&quot;,&quot;x15&quot;:&quot;0x0&quot;,&quot;x16&quot;:&quot;0x6ed2496ac0&quot;</span><br><span class="line">Stackinfo:                                                                                                                                                                                                          </span><br><span class="line">  #00 pc 0000000000095300  /apex/com.android.runtime/lib64/bionic/libc.so (strstr)                                                                                                                                  </span><br><span class="line">  #01 pc 000000000001aa88  /data/app/~~EpW7Q_NNKlVh9bZXN1dcWQ==/com.zhihu.android-Zt48AaNHSi4nYrZ8qtxQvg==/lib/arm64/libmsaoaidsec.so                                                                               </span><br><span class="line">  #02 pc 000000000001b870  /data/app/~~EpW7Q_NNKlVh9bZXN1dcWQ==/com.zhihu.android-Zt48AaNHSi4nYrZ8qtxQvg==/lib/arm64/libmsaoaidsec.so                                                                               </span><br><span class="line">  #03 pc 00000000000b1790  /apex/com.android.runtime/lib64/bionic/libc.so (__pthread_start(void*)+204)                                                                                                              </span><br><span class="line">  #04 pc 00000000000511ac  /apex/com.android.runtime/lib64/bionic/libc.so (__start_thread+64)                                                                                                                       </span><br></pre></td></tr></table></figure>
<p>得到两个信息 <code>libmsaoaidsec.so</code> 的两个地址 <code>1aa78</code> 和 <code>1aa88</code>，使用 <a href="https://github.com/radareorg/radare2">radare2</a> 寻找关键逻辑。</p>
<h3 id="找到关键检测逻辑"><a href="#找到关键检测逻辑" class="headerlink" title="找到关键检测逻辑"></a>找到关键检测逻辑</h3><p>复制出 <code>libmsaoaidsec.so</code>，使用 <a href="https://github.com/radareorg/iaito">iaito</a> 打开。</p>
<ol>
<li>定位到 <code>1aa78</code> 地址所在函数为 <code>fcn.0001a940</code></li>
</ol>
<p><img src="locate.png" alt=""></p>
<ol start="2">
<li>交叉引用(xref)找到 <code>fcn.0001a940</code> 方法被 <code>fcn.0001aee4</code> 调用</li>
</ol>
<p><img src="usage1.png" alt=""></p>
<ol start="3">
<li>重复上述步骤，最终找到 <code>fcn.0001b88c</code>，正好和文章里提到的地址一样。<br><img src="usage2.png" alt=""></li>
</ol>
<h3 id="使用-radare2-修改-so"><a href="#使用-radare2-修改-so" class="headerlink" title="使用 radare2 修改 so"></a>使用 <a href="https://github.com/radareorg/radare2">radare2</a> 修改 so</h3><ol>
<li><p>找到 <code>fcn.0001b88c</code> 只有一处调用，将调用置为 <code>nop</code><br><img src="nop.png" alt=""></p>
</li>
<li><p>修改后的 so<br><img src="modified.png" alt=""></p>
</li>
</ol>
<h3 id="替换-so，测试-frida"><a href="#替换-so，测试-frida" class="headerlink" title="替换 so，测试 frida"></a>替换 so，测试 frida</h3><p>保存修改好的 so，替换手机内原文件。打开 frida 测试一下，已经可以正常使用。</p>
<p><img src="frida.png" alt=""></p>
<h3 id="Over"><a href="#Over" class="headerlink" title="Over~"></a>Over~</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.seeflower.dev/archives/178/&quot;&gt;eBPF on Android之使用stackplz拯救你的frida&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原理在引用的这篇文章里，
    
    </summary>
    
      <category term="learn" scheme="https://invoker.me/categories/learn/"/>
    
    
      <category term="逆向" scheme="https://invoker.me/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Bypass pixel setup on PixelExperience</title>
    <link href="https://invoker.me/bypass-pixel-setup-on-pixelexperience/"/>
    <id>https://invoker.me/bypass-pixel-setup-on-pixelexperience/</id>
    <published>2022-06-08T07:54:38.000Z</published>
    <updated>2025-06-29T04:49:36.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h1><ol>
<li>Device with Pixel Experience flashed</li>
<li>Device unlocked, with custom recovery (Twrp or OrangeFox)</li>
</ol>
<h1 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h1><ol>
<li>重启到 recovery，开启 adb</li>
<li>找到 system 分区，注意不是 recovery 模式下 shell 里的 <code>/system/build.prop</code> </li>
<li>adb shell 进入，并挂载 system 分区 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o rw /dev/block/dm-1 /mnt/</span><br></pre></td></tr></table></figure></li>
<li>修改 <code>/system/build.prop</code> 也就是在我们挂载的分区里找这个文件，添加下面这行 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ro.setupwizard.mode=DISABLED</span><br></pre></td></tr></table></figure></li>
<li>reboot</li>
</ol>
<p>Refs:</p>
<ul>
<li><a href="https://blog.aceforeverd.com/bypass-pixel-setup-on-pixelexperience/">https://blog.aceforeverd.com/bypass-pixel-setup-on-pixelexperience/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Requirements&quot;&gt;&lt;a href=&quot;#Requirements&quot; class=&quot;headerlink&quot; title=&quot;Requirements&quot;&gt;&lt;/a&gt;Requirements&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Device with Pixel Experi
    
    </summary>
    
      <category term="折腾" scheme="https://invoker.me/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="Android" scheme="https://invoker.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Compose (UI) 不止 UI（part 1）:巨变</title>
    <link href="https://invoker.me/compose-ui-beyond-the-ui-part-i-big-changes/"/>
    <id>https://invoker.me/compose-ui-beyond-the-ui-part-i-big-changes/</id>
    <published>2021-12-25T03:39:03.000Z</published>
    <updated>2025-06-29T04:49:36.603Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文地址： <a href="https://proandroiddev.com/compose-ui-beyond-the-ui-part-i-big-changes-bfe824ee8ed4">https://proandroiddev.com/compose-ui-beyond-the-ui-part-i-big-changes-bfe824ee8ed4</a></p>
</blockquote>
<p>Jetpack Compose 是开发 Andorid UI 和应用的新工具。因为是以 UI 框架的形式问世的，已经有许多文章介绍它的内部原理和如何用来构建 UI。</p>
<p>但是构建一个应用不仅仅是 UI，在其他方面 Compose 也带来了改变。这个系列文章，我会关注一些<strong>未来构建 App 时可能会发生的变化</strong>。</p>
<p>我认为，它有许多优势，除此之外还会因为其他因素被广泛使用。有必要讨论它会如何改变我们的开发，找到适合我们需求的方式。</p>
<blockquote>
<p>注意：本文提到的 Compose 都是指 Compose UI，<a href="https://jakewharton.com/a-jetpack-compose-by-any-other-name/">而 Compose 并不是只有 UI 呦！</a></p>
</blockquote>
<h1 id="如今的-Android-开发有什么问题？"><a href="#如今的-Android-开发有什么问题？" class="headerlink" title="如今的 Android 开发有什么问题？"></a>如今的 Android 开发有什么问题？</h1><p>Android 有些方面很复杂。一部分是因为 bug，另外是缺少经验的开发者（甚至有些老 Android 开发也）常常遇到问题。</p>
<h2 id="Fragment-和-Activity-的生命周期"><a href="#Fragment-和-Activity-的生命周期" class="headerlink" title="Fragment 和 Activity 的生命周期"></a>Fragment 和 Activity 的生命周期</h2><blockquote>
<p>生命周期是 Android 开发最复杂的点之一：是导致许多错误的根源，对开发者来说很难理解。</p>
</blockquote>
<p>尤其是 Fragment，<a href="https://developer.squareup.com/blog/advocating-against-android-fragments/">可以看这里</a>，内部有两个生命周期，一个是 view，一个是 Fragment 自己。<br>还有复杂的返回栈。比如，你在 fragment 存活时监听了一个数据，想去更新 UI 时，却发现 view 已经销毁了；又或者新的 view 已经创建，而你持有了一个已经被销毁 view 的引用，导致内存泄漏。</p>
<p>随着文档改善，建议的增加，和 Lifecycle 相关组件的引入，处理生命周期相对来说有所改善。但它仍是一个问题源。</p>
<h2 id="Configuration-changes-回调"><a href="#Configuration-changes-回调" class="headerlink" title="Configuration changes 回调"></a>Configuration changes 回调</h2><p>Android 生命周期开发非常复杂的另一个原因就是 configuration changes。<a href="https://developer.android.com/guide/topics/resources/runtime-changes#HandlingTheChange">谷歌建议我们</a>让系统处理 configuration change，大部分应用都遵守了（<em>UPD：这个建议是给老的 view 系统的，compose 不再需要</em>）。举例来说，让系统处理 configuration change 的一个场景就是转屏，系统重新创建 activity（和 fragment 和 view）。有许多影响：整在执行的操作会被暂停，内存中的数据会重置。除此之外，状态和任务也会丢失，用户要等待。</p>
<p>解决这个问题有几种方案：首先忽略官方的建议，<strong>自己处理 configuration change</strong>。Activity 和 Fragment 没有被重建，转屏会快一点，但是我们要手动重载资源，更新 UI。</p>
<p>另一个方案就是<strong>让这些类被引用</strong>，也就是不被销毁。以前是用一个 headless 的 fragment，现在通常用 ViewModel 实现。ViewModel 与 MVVM 无关，只是一个可以在 fragment 和 activity 生命周期 recreate 后，不被销毁的类。</p>
<p>使用 ViewModel 也不简单，首先要由系统实例化，如果我们想给 ViewModel 的构造方法加个参数（几本是必然要加），就要提供工厂方法。并且 ViewModel 不能方便的访问绑定到 Fragment 或是 Activity 的对象，有一个更短的生命周期： resource，local 和 fragment 自己…想要访问这些对象，需要更复杂的逻辑避免内存泄漏。</p>
<h2 id="Theming-and-material-components"><a href="#Theming-and-material-components" class="headerlink" title="Theming and material components"></a>Theming and material components</h2><p>Android 的主题和 material components 就是难用。使用组件支持的功能很方便，一旦你稍微想对组件做一些定制，准备好个把钟头吧。</p>
<h1 id="Compose-做了什么改变？"><a href="#Compose-做了什么改变？" class="headerlink" title="Compose 做了什么改变？"></a>Compose 做了什么改变？</h1><p>虽然 Compose UI 只是个 UI 工具，它的工作原理在 UI 之外改变我们应用的架构。可以让我们更好的处理前面的问题，<strong>改善 Android 开发体验</strong>。</p>
<h2 id="和-Fragment-说再见，你不会想它的。"><a href="#和-Fragment-说再见，你不会想它的。" class="headerlink" title="和 Fragment 说再见，你不会想它的。"></a>和 Fragment 说再见，你不会想它的。</h2><p>首先，Compose 不需要 Fragment。迁移现有 App 的过程中，使用 Fragment 包一层 Compose  或许情有可原；全新的项目里，就忘掉 Fragment 吧。<br>Compsoe 可以让我们访问 Context 和 Android framework， composable 函数可以承载 UI，大到整块屏幕，或是用来做到 navigation frameworks。所以，没有理由在一个 100% Compose 应用里使用　Fragment：<strong>何况它们没有提供任何价值</strong>还要处理生命周期。</p>
<h2 id="终结-Configuration-changes-带来的破坏"><a href="#终结-Configuration-changes-带来的破坏" class="headerlink" title="终结 Configuration changes 带来的破坏"></a>终结 Configuration changes 带来的破坏</h2><p>关于如何去做，我们会在后面的文章介绍，使用 Compose 比传统 view 的方式容易很多。不必担心 view 生命周期超出控制器（ViewModel，Presenter 等），或是任务被暂停（有些任务例外，不过那是另外一个话题了）。<br>可以避免重建重量级组件比如 Activity ,对 view 有了更多的控制权，创造更快的用户体验。</p>
<h2 id="不需要-ViewModel"><a href="#不需要-ViewModel" class="headerlink" title="不需要 ViewModel"></a>不需要 ViewModel</h2><p>自己处理 Configuration changes 随之而来的就是不再需要 ViewModel 了， ViewModel 是为了在 recreate 期间持有数据和任务。<br>我们创建自己的 controller，不需要继承 ViewModel，更轻量，不需要 factory 而且是平台无关的。当然，其实也没有特别简单，后面文章会介绍。</p>
<h2 id="给人类使用的-Theming-和-material-components"><a href="#给人类使用的-Theming-和-material-components" class="headerlink" title="给人类使用的 Theming 和 material components"></a>给人类使用的 Theming 和 material components</h2><p>在 Compose 自定义 widget 相较于之前的方式更简单，更容易。</p>
<p>不止于此！我们可以看到所有 material component 的实现，观察它如何工作，使用了什么主题，接收什么参数。总之主题和 material components 会更好用，<br>从代码就可以方便看出支持什么，添加不支持的功能。（译者注：作者这里就给 Compose 一顿夸，没有解释为什么。我想到一个点是 Compose 所有的参数都可以在函数上方便的看到，而不像之前 xml，支持哪些属性，和对应的行为完全靠猜）。</p>
<h1 id="Compose-带来的其他变化"><a href="#Compose-带来的其他变化" class="headerlink" title="Compose 带来的其他变化"></a>Compose 带来的其他变化</h1><h2 id="Databinding-棺材板上的最后一颗钉子"><a href="#Databinding-棺材板上的最后一颗钉子" class="headerlink" title="Databinding 棺材板上的最后一颗钉子"></a>Databinding 棺材板上的最后一颗钉子</h2><p>当前的趋势就是，架构越来越响应式，而响应式编程关键一步就是如何将数据绑定到 UI。没有问题不代表不能改善。</p>
<p>使用 databinding 插件可以少写很多模板代码，但是会影响编译速度，编译失败时的问题又很难排查 debug。</p>
<p>Compose 就没有这些问题，数据和 UI 自动绑定，框架帮我们做了，谢天谢地。</p>
<p>还有 LiveData，帮我们持有 UI 关心的数据，处理生命周期很有用。虽然在 kotlin 使用上有点小问题，即使声明为非空类型，也会有 null 传过来。</p>
<p>Databinding 插件只能配合 LiveData 使用，用了 DataBinding 就不能用 flow 替换 LiveData(UPD: Android Studio ArticFox 之后 databinding 支持 StateFlow)。<br>Compose 没有这个问题，用了 Flow，除了解决 null 问题之外，还有更多的操作符可供使用，很能将较重的任务放在其他线程执行（没错，就像 RxJava 那样）。</p>
<h2 id="Welcome-multiplatform"><a href="#Welcome-multiplatform" class="headerlink" title="Welcome multiplatform"></a>Welcome multiplatform</h2><p>终于讲到 multiplatform 了。Kotlin multiplatform 推动进展显著，会改变整个行业。Compose 支持跨平台：Jetbrains 搞了 <a href="https://www.jetbrains.com/lp/compose/">Compose for Desktop</a>！（UPD: 还有 <a href="https://blog.jetbrains.com/kotlin/2021/05/technology-preview-jetpack-compose-for-web/">web</a>!）</p>
<p>一份代码，跨平台想想都美（在做梦）。</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>用 Compose 明天会更好。不久的将来，没有 Fragment，没有 ViewModel，view 和 controller 和 lifecycle 一一映射，开发体验会更愉快。需要学习很多新的内容。<br>（后悔了，我翻译了个广告，没啥有意思的东西…立个 flag，下家公司不用 Compose 不去）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文地址： &lt;a href=&quot;https://proandroiddev.com/compose-ui-beyond-the-ui-part-i-big-changes-bfe824ee8ed4&quot;&gt;https://proandroiddev.com
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[翻译] 代码每一天</title>
    <link href="https://invoker.me/write-code-every-day/"/>
    <id>https://invoker.me/write-code-every-day/</id>
    <published>2021-11-20T05:20:31.000Z</published>
    <updated>2025-06-29T04:49:36.620Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Ref: <a href="https://johnresig.com/blog/write-code-every-day/">https://johnresig.com/blog/write-code-every-day/</a><br>Posted: April 10th, 2014</p>
</blockquote>
<p>去年秋天，我的 <a href="https://github.com/jeresig">Side Project</a> 到了紧要关头：而我没有取得实质的进展，我无法在不影响正常工作的情况下，完成更多工作。</p>
<p>做这个 Side Project 时，有几个问题。我主要是在晚上或是周末时间开工，这个策略不对，为了在周末完成高质量的工作，给我带来了很大的压力（如果我做不到，就会感觉很失败）。而且，不能保证每个周末都是空闲的，也不能保证这两天无时无刻都在编程（一点休息，放松都不做是不可能的）。还有一个问题就是，一周对于某些编码工作来说，间隔太久了，很容易就忘记之前在做什么（就算你做了笔记）。更不要说，如果你错过了一个周末，就有两周的空窗期，这种持续数周的上下文切换很致命（我有很多 Side Project 就是这样挂掉的）。</p>
<p>受到 <a href="http://jenniferdewalt.com/">Jennifer Dewalt</a> 在去年 180 天完成 180 个网站的项目影响，我觉得有必要试一下：每天都花时间搞 Side Project。</p>
<p>我制定了一些规则：</p>
<ol>
<li>每天都要写代码。可以写文档，博客或是其他东西，但是不能算入代码之内。</li>
<li>必须是有效代码。不能是调整缩进，格式化代码这种的工作，最好重构也不算。（可以做，但不能算有效代码）</li>
<li>代码必须在午夜前完成。</li>
<li>代码要开源，上传到 Github。</li>
</ol>
<p>有些规则很武断。技术上来讲，代码不需要在午夜前完成编写，我只是想避免熬夜而写烂代码。代码也不一定要开源上传到 Github，我只是尽量让我对编写的代码进行更多的思考（思考复用，在早期考虑创建 module）。</p>
<p>目前为止，我执行的很成功，已经坚持了 20 周了。这完全改变了我的编码方式，并对我的生活和精神产生了实质性的影响。</p>
<p>随着习惯改变，一些有趣的事也发生了：</p>
<p><strong>最小可执行代码。</strong> 我强迫自己每天编写不少于 30 分钟的代码，（在短时间内编写有意义的代码很难，特别是刚上完一天班）一周里有几天我甚至会写更久（通常不超过一个小时），周末优势可以干一整天。</p>
<p><strong>写代码成为习惯。</strong>我并不在意 Github 上的绿格子。我感觉最重要的是：这是你为你自己的生活作出的改变，而不是别人的看法。减肥和锻炼也是：如果你不在意提升自己，你就不会成功。</p>
<p><strong>战胜焦虑。</strong>在这个尝试之前，我常常感到焦虑，没有完成“足够”的工作，没有取得“足够”的进展（这两个东西其实都无法量化，因为我连个时间表都没有）。我意识到<strong>取得进展的成就感，和取得实际进展同样重要</strong>。这让我眼界大开。自从我每天都取得进展，我的焦虑消失了。我感受到了所完成的工作量，不再疯狂渴望完成所有工作。</p>
<p><strong>周末。</strong>以前，周末完成工作是至关重要的（通常来说，这是我之前完成 Side Project 代码编写的唯一时间）。现在不同了——这很好。在周末完成一周的计划，通常会让我失望。我很少能在周末完成我想要做的事，为了完成更多工作，我常常要强迫自己拒掉其它周末活动（吃啊，逛博物馆，去公园，约会等等）。我强烈认为，Side Project 很重要，但是不要影响到正常生活。</p>
<p><strong>后台任务。</strong>自从开始每天写 Side Project，一个有趣的变化是，要做的活常常在头脑里窜出来。走路，洗澡等等其它不太用脑子的时候，我会思考接下来要写的代码，找到一个解决问题的好方法。在此之前没有这种情况，之前都是在想写其它任务，或者被自己的焦虑情绪占据。</p>
<p><strong>上下文切换。</strong>搞 Side Project 总是会有上下文切换的开销。之前的时候隔了一周再去恢复上下文太难了。每天编写代码，恢复现场更容易了。</p>
<p><strong>工作生活平衡。</strong> 学会如何更好地平衡工作，Side Project 和生活，也是非常重要的变化之一。因为每天都要去写 Side Project，我必须很好的安排时间。如果今晚要出去嗨皮，很晚才能回来，那我就得早点开始 Side Project 的工作，也就是在日常公司工作开始之前。如果我没有完成 Side Project 的工作，并且晚上又出去了，我会尽快赶回家完成它（而不是错过这一天）。值得一提的是，我发现留给业余爱好的时间变少了，但这是一个值得的权衡，为了生活。</p>
<p><strong>外在认知。</strong> 额外还有一个新的习惯，就是沟通。我的伴侣理解我必须完成每天的工作，一些活动安排都要绕开它。很欣慰在我说了“我们可以看电影，不过之后我要把代码写完”后能够理解。</p>
<p><strong>写了多少代码？</strong>我很难相信过去几个月自己写了多少代码。我写了几个网站，重写了一写框架，创建了一堆 node 模块。我写了好多东西，都忘了。几周前的工作看起来就很遥远了。我对自己完成的工作量很满意。</p>
<p>我认为这种习惯上的改变是巨大的成功，并希望尽可能地继续下去。与此同时，我将尽我所能向那些希望搞 Side Projetc 的人推荐这个方法。欢迎<a href="https://johnresig.com/about/">向我反馈</a>，非常乐于听到你的故事。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Ref: &lt;a href=&quot;https://johnresig.com/blog/write-code-every-day/&quot;&gt;https://johnresig.com/blog/write-code-every-day/&lt;/a&gt;&lt;br&gt;Post
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[翻译] 使用 Compose 进行状态管理的现状</title>
    <link href="https://invoker.me/the-state-of-managing-state-with-compose/"/>
    <id>https://invoker.me/the-state-of-managing-state-with-compose/</id>
    <published>2021-11-12T02:52:35.000Z</published>
    <updated>2025-06-29T04:49:36.619Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文链接： <a href="https://code.cash.app/the-state-of-managing-state-with-compose">https://code.cash.app/the-state-of-managing-state-with-compose</a><br>作者：<a href="https://twitter.com/JakeWharton">JakeWharton</a></p>
</blockquote>
<p>Cash App 从五年前开始将 Android 客户端 UI 的 render 和 presenter 分离到不同类里。过去的几年里我们重度使用 RxJava，对这个过程帮助很大。我曾做过一个分享，<a href="https://jakewharton.com/the-state-of-managing-state-with-rxjava/">使用 RxJava 进行状态管理的现状</a>，在那里我重新定义了 RxJava 的（反）模式以适用于我们想要的架构。</p>
<p>尽管干净的分层改善了测试性，但是管理状态的代码变得不够清晰，难以理解。业务逻辑被淹没在海量的 RxJava 操作符的组合与嵌套之中。我们尝试过几种 redux 类的库，甚至还自己实现了一个，想避免这种情况，但效果都不够理想。</p>
<p>没多久，我离开了 Cash App 去了 Google，开发了 <a href="https://github.com/JakeWharton/SdkSearch">SdkSearch</a> 继续测试类似的架构。在此期间从 RxJava 迁移到 kotlinx.coroutines 的 <code>Channel</code> 解锁了多平台支持。却没有迁移到 <code>Flow</code>，迁移本身并没有难度，问题不再这，而是<strong>生成状态的逻辑应该如何定义</strong>。我对我想要的方式有一个画面，但是不能避免陷入大量 API 之中，简单的表达出来。</p>
<p>回到 Cash App 之后，我仍然不认为现有 <code>Flow</code> 和协程的任何形式是一个足够好的解决方案。我开始尝试使用 <a href="https://code.cash.app/the-state-of-managing-state-with-compose#fn:2">Compose</a> 去构建<a href="https://github.com/JakeWharton/mosaic/">命令行 UI </a><br>和<a href="https://jakewharton.com/multiplatform-compose-and-gradle-module-metadata-abuse/">多平台 UI binding</a>，思考适用于所有基于 Compose 项目的架构应扮演的角色。 <a href="https://twitter.com/mattprec">Matt Precious</a> 今年早些时候做了一个 Compose Web 项目，我们基于此反复迭代一个典型的 presenter/render 分离在 Compose 中应该是什么样子的。我们搞了点好玩的东西，不过它依赖了 Compose，所以只能用于 Compose UI 和 Compose Web。</p>
<p>或者说，可以？</p>
<h3 id="Enter-Molecule"><a href="#Enter-Molecule" class="headerlink" title="Enter Molecule"></a>Enter Molecule</h3><p><a href="https://github.com/cashapp/molecule/">Molecule</a> 基于一个想法，Compose 只用于产生状态，而不是去渲染的 UI。</p>
<p>首先，这个看起来怎么样？这个很重要！</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">Counter</span><span class="params">(start: <span class="type">Int</span>, stop: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">  <span class="keyword">val</span> value <span class="keyword">by</span> remember &#123; mutableStateOf(start) &#125;</span><br><span class="line">  </span><br><span class="line">  LaunchedEffect(<span class="built_in">Unit</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (value &lt;= stop) &#123;</span><br><span class="line">      delay(<span class="number">1_000</span>)</span><br><span class="line">      value++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这就是一个普通的 composable 函数，返回一个状态，可以用于绑定到 Compose UI 的 text 属性上。</p>
<p>Molecule 可以让你以 composable 的形式，将其转换成 <code>StateFlow&lt;Int&gt;</code> 在其他地方使用。当第一个值初始化后， Compose 同步 recompose，所有后续的值都会 emit 到 StateFlow。</p>
<p>在 presenter，我们可以在 Molecule 中使用可组合的函数模式：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">SomePresenter</span><span class="params">(events: <span class="type">Flow</span>&lt;<span class="type">EventType</span>&gt;)</span></span>: ModelType &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> models: StateFlow&lt;ModelType&gt; = scope.launchMolecule &#123;</span><br><span class="line">  SomePresenter(events)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Compose 为我们开启了一种新的方式，去实现逻辑。编译器插件的使用，以一种原始协程库 API 无法实现的方式解锁了这门语言。关于 Compose 可以看<a href="https://developer.android.com/jetpack/compose">官方文档</a>。</p>
<p>现在，我们可以不必再写一堆 RxJava 或是 Flow 操作符，我就写 <code>if/else</code>，<code>for</code> 循环，不必再用 <code>publish</code>/<code>filter</code>/<code>merge</code> 组合，直接用 <code>when</code> 语句，还能有 exhaustiveness 语法检查。</p>
<p>Compose 提供的工具，比如 <code>remember</code>，state，derived state，effects 等等我们都可以继续用。Molecule 的示例项目中有稍微复杂的使用场景。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">CounterPresenter</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  events: <span class="type">Flow</span>&lt;<span class="type">CounterEvent</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">  randomService: <span class="type">RandomService</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: CounterModel &#123;</span><br><span class="line">  <span class="keyword">var</span> count <span class="keyword">by</span> remember &#123; mutableStateOf(<span class="number">0</span>) &#125;</span><br><span class="line">  <span class="keyword">var</span> loading <span class="keyword">by</span> remember &#123; mutableStateOf(<span class="literal">false</span>) &#125;</span><br><span class="line"></span><br><span class="line">  LaunchedEffect(<span class="built_in">Unit</span>) &#123;</span><br><span class="line">    events.collect &#123; event -&gt;</span><br><span class="line">      <span class="keyword">when</span> (event) &#123;</span><br><span class="line">        <span class="keyword">is</span> Change -&gt; &#123;</span><br><span class="line">          count += event.delta</span><br><span class="line">        &#125;</span><br><span class="line">        Randomize -&gt; &#123;</span><br><span class="line">          loading = <span class="literal">true</span></span><br><span class="line">          launch &#123;</span><br><span class="line">            count = randomService.<span class="keyword">get</span>(-<span class="number">20</span>, <span class="number">20</span>)</span><br><span class="line">            loading = <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> CounterModel(count, loading)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Cash App 的实际使用中是基于类的，可以标准化 presenter API，仍然可以享受编译时安全的依赖注入。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterPresenter</span> <span class="meta">@Inject</span> <span class="keyword">constructor</span></span>(</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> randomService: RandomService,</span><br><span class="line">) : MoleculePresenter &#123;</span><br><span class="line">  <span class="meta">@Composable</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">Present</span><span class="params">(events: <span class="type">Flow</span>&lt;<span class="type">CounterEvent</span>&gt;)</span></span> : CounterModel &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们使用 Molecule 已经有 5 个月了。它还没有为正式版做好准备，我们没有 100% 确定应该以怎样的形式使用 Compose API。我们在这周公布了这个库，集成到 Cash App 进行更多的测试。邀请你来加入我们，体验这个库。</p>
<p>这会是我们管理状态的最终形式吗？未必。但这是我们的下一个方案，也可能是你的~</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文链接： &lt;a href=&quot;https://code.cash.app/the-state-of-managing-state-with-compose&quot;&gt;https://code.cash.app/the-state-of-managing-s
    
    </summary>
    
    
      <category term="android" scheme="https://invoker.me/tags/android/"/>
    
      <category term="compose" scheme="https://invoker.me/tags/compose/"/>
    
  </entry>
  
  <entry>
    <title>翻译：Compose From First Principles</title>
    <link href="https://invoker.me/compose-from-first-principles/"/>
    <id>https://invoker.me/compose-from-first-principles/</id>
    <published>2021-06-03T14:05:26.000Z</published>
    <updated>2025-06-29T04:49:36.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Compose-首要原则"><a href="#Compose-首要原则" class="headerlink" title="Compose 首要原则"></a>Compose 首要原则</h1><blockquote>
<p>原文地址：<a href="http://intelligiblebabble.com/compose-from-first-principles/">http://intelligiblebabble.com/compose-from-first-principles/</a><br><strong>译者注：原文写于 2019 年，有点内容过时了，但是全文还是很值得一看的！翻译夹杂私货，仅作学习备忘，建议读原版。</strong><br><a href="https://twitter.com/intelligibabble">推荐关注作者的 Twitter</a></p>
</blockquote>
<p>本月初，来自世界各地的数千名开发者参加了谷歌2019年的I/O大会。我对此次 I/O 尤为兴奋，Google 第一次公开介绍了 Jetpack Compose 项目，我从 2018 年二月开始受雇于这个项目。</p>
<p>Compose 是一个雄心勃勃的跨团队项目，在安卓平台初始 UI 工具推出的 10 多年后，致力于重新构想 Android UI 工具集。</p>
<p>有一个关于<a href="https://www.youtube.com/watch?v=VsStyq4Lzxo">声明式 UI </a>的视频，解释了这个项目背后的动机和目标，本篇文章不再赘述。如果你想在阅读本文之前，了解背后的动机，可以先去看这个视频，本文只讨论实现细节。</p>
<iframe width="728" height="320" src="https://www.youtube.com/embed/VsStyq4Lzxo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>自从我们开源了 <a href="http://d.android.com/jetpackcompose">Compose</a> 后，很多人对它的工作原理很感兴趣，提出了许多问题。我考虑了会儿先讲哪一点比较合适。</p>
<p>本文主要想给大家建立一个扎实的思维模式，关于 Compose 做了什么，把看起来像黑魔法似的操作背后原理讲明白。我想，最好的方式莫过于把 Compose 工作原理简化，先构建一个原始框架，再一点点的修饰，逐渐变成一个像样的东西。换句话说，让我们从“基本原理”开始，写一个 Compose。</p>
<p>本文只解释 Compose 做了什么，不负责解释为什么这样做。读者需要熟悉 <a href="https://kotlinlang.org/docs/reference/">Kotlin</a>，尤其是<a href="https://kotlinlang.org/docs/reference/extensions.html">扩展函数</a>。</p>
<p>最后声明下，<em>文中代码和 Compose 实际应用完全没有关系</em>。</p>
<h2 id="UI-是树状数据结构"><a href="#UI-是树状数据结构" class="headerlink" title="UI 是树状数据结构"></a>UI 是树状数据结构</h2><p>Compose 的核心设计目的是为了高效构建 <em>并维护</em> 树状数据结构。更具体的说，他提供了一种可以描述树如何<em>随时间变化</em>的编程模型 。</p>
<p>这种变成模型不是全新的。我们从许多框架中得到启发，例如 <a href="https://reactjs.org/">React</a>，<a href="https://fblitho.com/">Litho</a>，<a href="https://vuejs.org/">Vue</a>，<a href="https://flutter.dev/">Flutter</a> 等等，他们都以各自的方式达成了这个目的。</p>
<p>从上面列出的框架中，我们大概可以猜到，这各系统主要是用来构建 UI 的。UI 是典型的会随时间变化的树状数据结构。而且，现代 UI 正在变得越来越动态，复杂，需要一种编程模型来缓解复杂度。</p>
<p>Compose 的运行时并不聚焦于某一种类型的树，已经被在很多不同类型的树上了，例如 Android Views, ComponentNodes, Vectors, TextSpan，后续还会有更多的应用场景。</p>
<p>本文没有使用上面提到的，而是自己定义一个基础树状结构，更易于理解。</p>
<p>我们可以想象一个非常基础的 UI 库，定义了以下几种类型：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> children = mutableListOf&lt;Node&gt;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Orientation</span> </span>&#123; Vertical, Horizontal &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span></span>(<span class="keyword">var</span> orientation: Orientation) : Node()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Text</span></span>(<span class="keyword">var</span> text: String) : Node()</span><br></pre></td></tr></table></figure>
<p>这里只有两个原始类型：<code>Stack</code> 和 <code>Text</code>。真实场景肯定比这多，还有一堆属性和方法，不过没影响，我们就图省事。这俩相当于 Android 里的那堆 <a href="https://developer.android.com/reference/android/view/View"><code>View</code></a>，或者 Web 里的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element"><code>Element</code></a>。</p>
<p>接着，我们需要一个方法，把 Node 树渲染成像素到屏幕上。这个方法的实现细节不重要，我们假设有这么一个东西就好：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">renderNodeToScreen</span><span class="params">(node: <span class="type">Node</span>)</span></span> &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>
<p>用上面这套东西写出来的 “Hello World” 长下面这个样子：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  renderNodeToScreen(Text(<span class="string">&quot;Hello World!&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面我们开始搞个复杂点的，写一个 “To Do List” 程序。</p>
<h2 id="从-UI-到“转换函数”"><a href="#从-UI-到“转换函数”" class="headerlink" title="从 UI 到“转换函数”"></a>从 UI 到“转换函数”</h2><p>构建应用的一个指导原则就是要把 “model” 的概念从 “UI” 中分离。</p>
<p>这里我们的 “model” 是个 <code>TodoItem</code> 的 list，一种实现方式是用一个函数，把 item list 转换成 Node 树：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">TodoApp</span><span class="params">(items: <span class="type">List</span>&lt;<span class="type">TodoItem</span>&gt;)</span></span>: Node &#123;</span><br><span class="line">  <span class="keyword">return</span> Stack(Orientation.Vertical).apply &#123;</span><br><span class="line">    <span class="keyword">for</span> (item <span class="keyword">in</span> items) &#123;</span><br><span class="line">      children.add(Stack(Orientation.Horizontal).apply &#123;</span><br><span class="line">        children.add(Text(<span class="keyword">if</span> (item.completed) <span class="string">&quot;x&quot;</span> <span class="keyword">else</span> <span class="string">&quot; &quot;</span>))</span><br><span class="line">        children.add(Text(item.title))</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这就可以响应程序的数据变化，并渲染到屏幕上。像下面这样：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  todoItemRepository.observe &#123; items -&gt;</span><br><span class="line">    renderNodeToScreen(TodoApp(items))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面 <code>TodoApp</code> 的例子里可以看出，直接向 parent 的 children 属性添加节点很麻烦。我们需要保证这个树里所有 Node 都可以访问其 parent 的 <code>children</code> 属性，调用 <code>children.add(...)</code>。在这个例子里可能看起来还行，不算麻烦，但是当函数逻辑变得再复杂点，就不够用了，很难维护。</p>
<p>我们可以新建一个 “holder” 对象，用它来持有当前的 “parent” 的 <code>Node</code>。然后用一个 “emit” 函数把 node 添加到 parent，还提供一个 “content” lambda 参数，在这个 lambda 的作用域里，emit 参数传入的 <code>Node</code> 是 parent。这个 “emit” 函数可以把一个 Node 添加到当前这棵树的当前位置（译者注：dsl 声明的感觉？），而不需要知道当前位置的 parent 是谁。</p>
<p>从语义上说，这个对象可以帮我们构建 “compose” 树，就叫他 <code>Composer</code> 吧。定义如下：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Composer</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 添加 node 到当前 Node</span></span><br><span class="line">  <span class="comment">// content，可以用来往参数传递的 node 里添加节点</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">emit</span><span class="params">(node: <span class="type">Node</span>, content: () -&gt; <span class="type">Unit</span> = &#123;&#125;)</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一个简单的实现。可以略过不看。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComposerImpl</span></span>(root: Node): Composer &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> current: Node = root</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">emit</span><span class="params">(node: <span class="type">Node</span>, content: () -&gt; <span class="type">Unit</span> = &#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 储存当前节点，用于后续恢复</span></span><br><span class="line">    <span class="keyword">val</span> parent = current</span><br><span class="line">    parent.children.add(node)</span><br><span class="line">    current = node</span><br><span class="line">    <span class="comment">// 在这个作用域中，执行传进来的 lambda 函数，lambda 里面的 emit 都会添加到参数 node</span></span><br><span class="line">    content()</span><br><span class="line">    <span class="comment">// 恢复 current</span></span><br><span class="line">    current = parent</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用上面的抽象，可以把 <code>TodoApp</code> 函数以 <code>Composer</code> 的<a href="https://kotlinlang.org/docs/reference/extensions.html">扩展函数</a>方式重写：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> Composer.<span class="title">TodoApp</span><span class="params">(items: <span class="type">List</span>&lt;<span class="type">TodoItem</span>&gt;)</span></span> &#123;</span><br><span class="line">  emit(Stack(Orientation.Vertical)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (item <span class="keyword">in</span> items) &#123;</span><br><span class="line">      emit(Stack(Orientation.Horizontal)) &#123;</span><br><span class="line">        emit(Text(<span class="keyword">if</span> (item.completed) <span class="string">&quot;x&quot;</span> <span class="keyword">else</span> <span class="string">&quot; &quot;</span>))</span><br><span class="line">        emit(Text(item.title))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着我们提供一个顶级函数 <code>compose</code>，它 new 了一个 <code>Composer</code>，并在这个 Composer 对象上执行一个 lambda，并把根节点返回：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">compose</span><span class="params">(content: <span class="type">Composer</span>.() -&gt; <span class="type">Unit</span>)</span></span>: Node &#123;</span><br><span class="line">  <span class="keyword">return</span> Stack(Orientation.Vertical).also &#123;</span><br><span class="line">    ComposerImpl(it).apply(content)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当我们想要构建 UI 时，就可以像下面这样使用：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// render UI</span></span><br><span class="line">renderNodeToScreen(compose &#123; TodoApp(items) &#125;)</span><br></pre></td></tr></table></figure>
<p>把我们的 ToDoApp 重构一下：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> Composer.<span class="title">TodoItem</span><span class="params">(item: <span class="type">TodoItem</span>)</span></span> &#123;</span><br><span class="line">  emit(Stack(Orientation.Horizontal)) &#123;</span><br><span class="line">    emit(Text(<span class="keyword">if</span> (item.completed) <span class="string">&quot;x&quot;</span> <span class="keyword">else</span> <span class="string">&quot; &quot;</span>))</span><br><span class="line">    emit(Text(item.title))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Composer.<span class="title">TodoApp</span><span class="params">(items: <span class="type">List</span>&lt;<span class="type">TodoItem</span>&gt;)</span></span> &#123;</span><br><span class="line">  emit(Stack(Orientation.Vertical)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (item <span class="keyword">in</span> items) &#123;</span><br><span class="line">      TodoItem(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种简单的结构，或者说把常见的 UI 逻辑分解成函数至关重要的特性。我们可以把这些函数称为 “Components”（组件）。</p>
<h2 id="位置化记忆"><a href="#位置化记忆" class="headerlink" title="位置化记忆"></a>位置化记忆</h2><p>一些注重性能的家伙可能注意到了，每次执行 <code>compose</code> 都会重新构建整棵树。对于大型应用这种性能浪费是不能容忍的。从正确性的角度来说，如果一个节点有私有状态，每次重建都会导致这些状态丢失。</p>
<p>对应这种问题有很多解决方案， Compose 使用了一种我们称为 “位置化记忆”（Positional Memoization）的技术。Compose 的很多架构都是基于这个概念，接下来让我们更加深入地理解它背后的思维模式。</p>
<p>上节讲了，我们引入 <code>Composer</code> 对象，它持有我们当前在树中的位置和使用 emit 构建视图树节点的上下文。我们的目标是继续使用我们的编程模型，并尝试在视图树重建时复用之前构建 UI 时创建的 Node。基本上，我们想就是想给每个 Node 加上缓存。</p>
<p>大部分缓存需要 key 从缓存中取回对象。从 TodoApp 的例子我们可以发现，每次执行 <code>TodoApp</code> 函数，都以同样的顺序创建了相同数量的 <code>Node</code>。我们假设缓存所有 Node，每次执行 <code>TodoApp</code> 函数时，以相同的顺序访问缓存（<em>如果我们引入条件分支，这个缓存逻辑就失效了，后面会讨论这个情况</em>）。</p>
<p>所以，我们使用 <em>执行顺序</em> 做缓存的 key，可以完全避免用于查找的成本；仅用一个 list 或者数组就可以缓存 node，读取缓存的操作也十分轻量。执行转换函数时维护一个 “当前索引”，每次读取缓存就 +1。</p>
<p>一个简单的实现，给 <code>Composer</code> 新增一个 <code>memo</code> 方法：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Composer</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* emit(...) excluded for brevity */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对比 input 和此前在当前位置的元素。如果发生变化，返回 factory 的结果，否则从返回之前的。</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">memo</span><span class="params">(<span class="keyword">vararg</span> inputs: <span class="type">Any</span>?, factory: () -&gt; <span class="type">T</span>)</span></span>: T</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// naive implementation. feel free to skip</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComposerImpl</span>: <span class="type">Composer &#123;</span></span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> cache = mutableListOf&lt;Any?&gt;()</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> inserting <span class="keyword">get</span>() = index == cache.size</span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">get</span><span class="params">()</span></span>: Any? = cache[index++]</span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">set</span><span class="params">(value: <span class="type">Any</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (inserting) &#123; index++; cache.add(value); &#125;</span><br><span class="line">    <span class="keyword">else</span> cache[index++] = value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">changed</span><span class="params">(value: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="comment">// 插入节点时，不需要比较，直接缓存并返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (inserting) &#123;</span><br><span class="line">      <span class="keyword">set</span>(value)</span><br><span class="line">      <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 获取当前位置的 item，index++。直接缓存新值，</span></span><br><span class="line">      <span class="comment">// 只有在 item 和 value 不同时返回 true</span></span><br><span class="line">      <span class="keyword">val</span> index = index++</span><br><span class="line">      <span class="keyword">val</span> item = cache[index]</span><br><span class="line">      cache[index] = value</span><br><span class="line">      item != value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">cache</span><span class="params">(update: <span class="type">Boolean</span>, factory: () -&gt; <span class="type">T</span>)</span></span>: T &#123;</span><br><span class="line">    <span class="comment">// 需要更新时，或者第一次执行时，需要执行 factory 并缓存结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (inserting || update) factory().also &#123; <span class="keyword">set</span>(it) &#125;</span><br><span class="line">    <span class="comment">// otherwise, just return the value in the cache</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">get</span>() <span class="keyword">as</span> T</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Composer.<span class="title">memo</span><span class="params">(<span class="keyword">vararg</span> inputs: <span class="type">Any</span>?, factory: () -&gt; <span class="type">T</span>)</span></span>: T &#123;</span><br><span class="line">    <span class="keyword">var</span> valid = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 需要对所有 input 执行检查，不能短路（译者注：changed() 里面修改了 index，短路就错了）。</span></span><br><span class="line">    <span class="keyword">for</span> (input <span class="keyword">in</span> inputs) &#123;</span><br><span class="line">      <span class="comment">// 任意一个 input 发生了变化，缓存就会失效。</span></span><br><span class="line">      valid = !changed(input) &amp;&amp; valid</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cache(!valid) &#123; factory() &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Demo 里只用了 <code>MutableList</code>，实际上 Compose 使用了一维数组的 <a href="https://en.wikipedia.org/wiki/Gap_buffer">Gap Buffer</a>，让查找，插入，删除操作更轻量。</p>
<p>注意，如果调用 <code>memo</code> 函数时传入 n 个 input，会增加缓存索引 <code>n+1</code> 次。这需要在给定的位置上，每次调用时都要有相同数量的 input，否则缓存会随时间错位。</p>
<p>现在我们可以用 <code>memo</code> 函数重写 <code>TodoApp</code>：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> Composer.<span class="title">TodoItem</span><span class="params">(item: <span class="type">TodoItem</span>)</span></span> &#123;</span><br><span class="line">  emit(memo &#123; Stack(Orientation.Horizontal) &#125;) &#123;</span><br><span class="line">    emit(</span><br><span class="line">      memo(item.completed) &#123;</span><br><span class="line">        Text(<span class="keyword">if</span> (item.completed) <span class="string">&quot;x&quot;</span> <span class="keyword">else</span> <span class="string">&quot; &quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    emit(</span><br><span class="line">      memo(item.title) &#123;</span><br><span class="line">        Text(item.title)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Composer.<span class="title">TodoApp</span><span class="params">(items: <span class="type">List</span>&lt;<span class="type">TodoItem</span>&gt;)</span></span> &#123;</span><br><span class="line">  emit(memo &#123; Stack(Orientation.Vertical) &#125;) &#123;</span><br><span class="line">    <span class="keyword">for</span> (item <span class="keyword">in</span> items) &#123;</span><br><span class="line">      TodoItem(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在，每次执行 <code>compose</code> 都会复用此前创建的 Node，如果没变的话。因为我们是用执行顺序作为缓存依据，我们使用的内存数量没变，编程模型也不变。</p>
<p>在当前示例中，记忆的最小节点是整个 Node，实际上我们可以单独记忆 Node 的属性，支持可变属性。</p>
<p>例如，假设 <code>text</code> 是 <code>Text</code> 的可变属性：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Text</span></span>(<span class="keyword">var</span> text: String) : Node()</span><br></pre></td></tr></table></figure>
<p>因此，我们可以复用 Text 节点，发生变化时，只更新它的 <code>text</code> 属性。实现这个需要另一个 <code>emit</code> 函数，稍微修改下函数签名：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Composer</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* emit(..) and memo(...) excluded for brevity */</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T: Node&gt;</span> <span class="title">emit</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">          factory: () -&gt; <span class="type">T</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">          update: (<span class="type">T</span>) -&gt; <span class="type">Unit</span> = &#123;&#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">          block: () -&gt; <span class="type">Unit</span> = &#123;&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">  )</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// naive implementation. feel free to skip.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComposerImpl</span></span>(<span class="keyword">val</span> root: Node) : Composer &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T: Node&gt;</span> <span class="title">emit</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">          factory: () -&gt; <span class="type">T</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">          update: (<span class="type">T</span>) -&gt; <span class="type">Unit</span> = &#123;&#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">          block: () -&gt; <span class="type">Unit</span> = &#123;&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">  )</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> node = memo(factory)</span><br><span class="line">    update(node)</span><br><span class="line">    emit(node, block)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个版本的 <code>emit</code> 中，<code>emit</code> 使用 <code>factory</code> 创建 <code>Node</code>，并使用 <code>memo</code> 缓存节点。接着在刚刚创建的 <code>Node</code> 实例上执行 <code>update</code> 函数。<code>update</code> lambda 里可以使用 <code>memo</code> 函数设置 Node 的属性，从而实现缓存 Node 的属性。</p>
<p>例如，<code>TodoItem</code> 可以这样重写：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> Composer.<span class="title">TodoItem</span><span class="params">(item: <span class="type">TodoItem</span>)</span></span> &#123;</span><br><span class="line">  emit(&#123; Stack(Orientation.Horizontal) &#125;) &#123;</span><br><span class="line">    emit(</span><br><span class="line">      &#123; Text() &#125;</span><br><span class="line">      &#123; memo(item.completed) &#123; it.text = <span class="keyword">if</span> (item.completed) <span class="string">&quot;x&quot;</span> <span class="keyword">else</span> <span class="string">&quot; &quot;</span> &#125; &#125;</span><br><span class="line">    )</span><br><span class="line">    emit(</span><br><span class="line">      &#123; Text() &#125;</span><br><span class="line">      &#123; memo(item.title) &#123; it.text = item.title &#125; &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以，为了让复用性能最佳，我们可以在每次调用 <code>compose</code> 时复用 <code>Node</code> 实例，Node 的属性变化时单独更新属性。</p>
<p>你可能已经注意到了，基于执行顺序记忆存在一个问题。如果在转换函数里引入了条件语句，就坏了。例如：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> Composer.<span class="title">TodoApp</span><span class="params">(items: <span class="type">List</span>&lt;<span class="type">TodoItem</span>&gt;)</span></span> &#123;</span><br><span class="line">  emit(&#123; Stack(Orientation.Vertical) &#125;) &#123;</span><br><span class="line">    <span class="keyword">for</span> (item <span class="keyword">in</span> items) &#123;</span><br><span class="line">        TodoItem(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">val</span> text = <span class="string">&quot;Total: <span class="subst">$&#123;items.size&#125;</span> items&quot;</span></span><br><span class="line">  emit(</span><br><span class="line">      &#123; Text() &#125;,</span><br><span class="line">      &#123; memo(text) &#123; it.text = text &#125;&#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里，假设第一次有两个 item，第二次有三个 item，会出现什么问题？</p>
<p>前两个 Node 没问题。和第一次执行时一样，我们的缓存可以读取到正确的值。</p>
<p>当我们拿第三个 <code>TodoItem</code> 时，由于首次执行时只有两个 item，我们拿到的缓存是带有 <code>&quot;Total: $&#123;items.size&#125; items&quot;</code> 属性的 <code>Text</code> 节点。由于这种错位，后续的缓存都失效了，在 获取 <code>Text</code> 节点的缓存时，会发现不存在，重新创建一个新的实例。</p>
<p>总之，每次控制流导致缓存数量对不上时，或者其它的执行顺序不一致了，我们的缓存就会产生错位，出现未定义行为。</p>
<p>修复这个需要给“位置化记忆”引入另一个至关重要的概念： 组（Group）。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Composer</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* emit(...) and memo(...) excluded for brevity */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// start a group, execute block inside that group, end the group</span></span><br><span class="line">  <span class="comment">// 新起一个 group，在 group 内执行代码块，结束 group</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">group</span><span class="params">(key: <span class="type">Any</span>?, block: () -&gt; <span class="type">Unit</span>)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://android.googlesource.com/platform/frameworks/support/+/f06c7ce26e29f15792b54490e4c2f77197d1222f/compose/runtime/src/main/java/androidx/compose/Composer.kt#592">实现太复杂了</a>，可惜这里写不下。</p>
<p>这个概念导致 composer 的记忆化缓存实现非常复杂，但它对保证位置化记忆正常工作非常重要。而且，group 使得线性缓存变为树状结构，我们可以由此区分节点是被移动了，删除了还是添加了。</p>
<p><code>group</code> 需要传入一个 key。这个 key 就和 <code>memo</code> 的 input 参数一样，会被存到缓存数组。但是当 key 和上次执行时不匹配的话，运行时会在缓存里搜索，判断这个 group 是被移动了，删除了还是添加了。</p>
<p>group 的 key 只要在 parent group 的范围内保持唯一就行，不需要全局唯一。好了，让我们使用 group 修改下 <code>TodoApp</code>：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> Composer.<span class="title">TodoItem</span><span class="params">(item: <span class="type">TodoItem</span>)</span></span> &#123;</span><br><span class="line">  group(<span class="number">3</span>) &#123;</span><br><span class="line">    emit(&#123; Stack(Orientation.Horizontal) &#125;) &#123;</span><br><span class="line">      group(<span class="number">4</span>) &#123;</span><br><span class="line">        emit(</span><br><span class="line">          &#123; Text() &#125;</span><br><span class="line">          &#123; memo(item.completed) &#123; it.text = <span class="keyword">if</span> (item.completed) <span class="string">&quot;x&quot;</span> <span class="keyword">else</span> <span class="string">&quot; &quot;</span> &#125; &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      group(<span class="number">5</span>) &#123;</span><br><span class="line">        emit(</span><br><span class="line">          &#123; Text() &#125;</span><br><span class="line">          &#123; memo(item.title) &#123; it.text = item.title &#125; &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Composer.<span class="title">TodoApp</span><span class="params">(items: <span class="type">List</span>&lt;<span class="type">TodoItem</span>&gt;)</span></span> &#123;</span><br><span class="line">  group(<span class="number">0</span>) &#123;</span><br><span class="line">    emit(&#123; Stack(Orientation.Vertical) &#125;) &#123;</span><br><span class="line">      <span class="keyword">for</span> (item <span class="keyword">in</span> items) &#123;</span><br><span class="line">          group(<span class="number">1</span>) &#123;</span><br><span class="line">              TodoItem(item)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> text = <span class="string">&quot;Total: <span class="subst">$&#123;items.size&#125;</span> items&quot;</span></span><br><span class="line">  group(<span class="number">2</span>) &#123;</span><br><span class="line">    emit(</span><br><span class="line">        &#123; Text() &#125;,</span><br><span class="line">        &#123; memo(text) &#123; it.text = text &#125; &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里给每个 group 都设置了不同的整数作为 key，<code>TodoItem</code> 也包了一层 group，确保每个 TodoItem 单独记忆。</p>
<p>现在当 <code>items</code> 从 2 变成 3 时，我们可以知道要往缓存里 “加一个” item，而不是去缓存里直接拿下一个，因为超出我们所在的 group 了。当 items 从缓存中移除时同理。</p>
<p>“移动” item 也类似，就是算法有点复杂。就不展开讲了，只说一点，我们是通过子 group 的 key 来识别 group 内的“移动”。如果打乱例子中的 <code>items</code> list，每个 TodoItem 的外层都是 group(1)，Composer 没法知道 item 的顺序改变了。问题倒也不算大，也就是缓存的性能不是最优，之前关联的状态被设置到其他 item 上。不过，我们可以使用 <code>item</code> 自己做 key：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (item <span class="keyword">in</span> items) &#123;</span><br><span class="line">  group(item) &#123;</span><br><span class="line">    TodoItem(item)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在，每个 group 和它包含的一组缓存会随 item 而动，<code>TodoItem</code> 可以从之前创建的缓存 group 拿到数据了，虽然移动缓存的开销变大了，但是增加了移动 item 时的复用缓存的可能性。</p>
<p>还有一种 key 可以声明 <code>@Pivotal</code> 属性，我会在以后的文章里讲解。</p>
<h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>目前为止， 示例仅仅是对数据进行一些简单的转换和映射到 UI。实际场景中，大部分 UI 都由多个状态组合而成，这些状态作为数据模型的一部分没有任何意义，重要的是将状态具现到 UI（比如： “view state”）。例如，文本选择、滚动位置、焦点、对话框可见性等状态，你也得放在数据模型里。这种状态只有 UI 关心，别的都不管。</p>
<p>Compose 需要一种状态模型处理这种“本地状态”。使用位置化记忆就可以很好地处理。</p>
<p>关于状态，让我们用计数器的例子，一个增加按钮，一个展示当前数值的Text，再加一个重置按钮。我们先用一个全局变量 <code>count</code> 开始：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Composer.<span class="title">App</span><span class="params">(recompose: () -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">  emit(&#123; Text() &#125;, &#123; memo(count) &#123; it.text = <span class="string">&quot;<span class="variable">$count</span>&quot;</span> &#125; &#125;)</span><br><span class="line">  emit(&#123; Button() &#125;, &#123; it.text = <span class="string">&quot;Increment&quot;</span>; it.onClick = &#123; count++; recompose(); &#125; &#125;)</span><br><span class="line">  emit(&#123; Button() &#125;, &#123; it.text = <span class="string">&quot;Reset&quot;</span>; it.onClick = &#123; count = <span class="number">0</span>; recompose(); &#125; &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> recompose: () -&gt; <span class="built_in">Unit</span> = &#123;&#125;</span><br><span class="line">  recompose = &#123;</span><br><span class="line">      renderNodeToScreen(compose &#123; App(recompose) &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  recompose()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为是全局变量，如果这个组件在多处复用，都会展示相同的数值。这肯定不是我们想要的效果，需要想个办法把 <code>count</code> 变成本地变量。</p>
<p>该怎么做？</p>
<p>首先尝试将 count 移入 App 函数体：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> 不会正常工作</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Composer.<span class="title">App</span><span class="params">(recompose: () -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  emit(&#123; Text() &#125;, &#123; memo(count) &#123; it.text = <span class="string">&quot;<span class="variable">$count</span>&quot;</span> &#125; &#125;)</span><br><span class="line">  emit(&#123; Button() &#125;, &#123; it.text = <span class="string">&quot;Increment&quot;</span>; it.onClick = &#123; count++; recompose(); &#125; &#125;)</span><br><span class="line">  emit(&#123; Button() &#125;, &#123; it.text = <span class="string">&quot;Reset&quot;</span>; it.onClick = &#123; count = <span class="number">0</span>; recompose(); &#125; &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每次函数调用，<code>count</code> 都会被重新初始化。</p>
<p>是不是和 Node 服用时很像，使用我们的位置化记忆工具搞定。事实证明，本地状态也可以用这种办法解决。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span>&lt;<span class="type">T</span>&gt;</span>(<span class="keyword">var</span> value: T)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Composer.<span class="title">App</span><span class="params">(recompose: () -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">val</span> count = memo &#123; State(<span class="number">0</span>) &#125;</span><br><span class="line"></span><br><span class="line">  emit(&#123; Text() &#125;, &#123; memo(count.value) &#123; it.text = <span class="string">&quot;<span class="subst">$&#123;count.value&#125;</span>&quot;</span> &#125; &#125;)</span><br><span class="line">  emit(&#123; Button() &#125;, &#123; it.text = <span class="string">&quot;Increment&quot;</span>; it.onClick = &#123; count.value++; recompose(); &#125; &#125;)</span><br><span class="line">  emit(&#123; Button() &#125;, &#123; it.text = <span class="string">&quot;Reset&quot;</span>; it.onClick = &#123; count.value = <span class="number">0</span>; recompose(); &#125; &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们使用 <code>memo</code> 在每次函数调用（在 UI 树的同一位置上）时获取 <code>State</code> 的同一实例。修改状态，并触发视图树重组，渲染更新 <code>State</code> 的值。</p>
<h2 id="关于-Composable-注解"><a href="#关于-Composable-注解" class="headerlink" title="关于 @Composable 注解"></a>关于 <code>@Composable</code> 注解</h2><p>我们已经在使用这些 `Composer’ <a href="https://kotlinlang.org/docs/reference/extensions.html">扩展函数</a> 上取得相当大的进展了。在效率和稳定性上都有所建树。</p>
<p>回看示例，有很多模板代码可以系统的添加。我们可以应用一些规则和范式，不用了解应用具体细节，自动添加这些模板代码。</p>
<p>让编译器来处理很合理！为此，Compose 引入 <code>@Composable</code> 注解。它有以下含义：</p>
<ol>
<li>函数内，所有调用 <code>Node</code> 子类构造函数的地方外部都包了一层 <code>emit</code> 调用， Node 的属性修改则包了一层 <code>memo</code> 调用。</li>
<li>所有标记了 <code>@Composable</code> 注解的函数，被调用时外部都包了一层 <code>group</code> 调用。group 的 key 由编译器分配一个调用栈内唯一的整数。</li>
<li>所有 <code>emit</code> 调用外部都包了一层 <code>group</code>，key 也是调用栈内唯一的整数。</li>
<li>函数额外接收一个隐式 <code>Composer</code> 参数，而不用写成 <code>Composer</code> 的扩展函数。因为 (1) 和 (2)，所有对 <code>Composer</code> 的需求都是隐式的。</li>
<li>所以，<code>@Composable</code> 标记的函数只能在 <code>@Composable</code> 函数内调用。 因为 (3)，需要传递  <code>Composer</code> 这个隐式参数。</li>
</ol>
<p>综上所述，最终 <code>App</code> 函数如下：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span>&lt;<span class="type">T</span>&gt;</span>(<span class="keyword">var</span> value: T)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span> <span class="function"><span class="keyword">fun</span> <span class="title">App</span><span class="params">(recompose: () -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">val</span> count = memo &#123; State(<span class="number">0</span>) &#125;</span><br><span class="line"></span><br><span class="line">  Text(<span class="string">&quot;<span class="subst">$&#123;count.value&#125;</span>&quot;</span>)</span><br><span class="line">  Button(text = <span class="string">&quot;Increment&quot;</span>, onClick = &#123; count.value++; recompose(); &#125;)</span><br><span class="line">  Button(text = <span class="string">&quot;Reset&quot;</span>, onClick = &#123; count.value = <span class="number">0</span>; recompose(); &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>TodoApp</code> 也可以重写下：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span> <span class="function"><span class="keyword">fun</span> <span class="title">TodoItem</span><span class="params">(item: <span class="type">TodoItem</span>)</span></span> &#123;</span><br><span class="line">  Stack(Orientation.Horizontal) &#123;</span><br><span class="line">    Text(<span class="keyword">if</span> (item.completed) <span class="string">&quot;x&quot;</span> <span class="keyword">else</span> <span class="string">&quot; &quot;</span>)</span><br><span class="line">    Text(item.title)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span> <span class="function"><span class="keyword">fun</span> <span class="title">TodoApp</span><span class="params">(items: <span class="type">List</span>&lt;<span class="type">TodoItem</span>&gt;)</span></span> &#123;</span><br><span class="line">  Stack(Orientation.Vertical) &#123;</span><br><span class="line">    <span class="keyword">for</span> (item <span class="keyword">in</span> items) &#123;</span><br><span class="line">      TodoItem(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Text(<span class="string">&quot;Total: <span class="subst">$&#123;items.size&#125;</span> items&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这可省老事了！虽然 <code>@Composable</code> 注解隐藏了大量内部调用机制，但并没有完全改变我们在调用一个函数式的预期。和 kotlin 协程提供的 <code>suspend</code> 函数机制很像。当然可以用 Future 实现和协程相同的工作，但是围绕 <code>suspend</code> 建立一个新的思维模式，可以少写很多模板代码。</p>
<p>现在，你应该对 <code>@Composable</code> 的实际作用和 Compose 背后的设计有所了解了。</p>
<p>当然还有许多内容没能在本文展现：</p>
<ul>
<li><code>@Model</code>工作原理。（译者注：本文写于2019年，现在 @Model 已被废弃）。</li>
<li>Composable 函数的延迟和并行化。</li>
<li>缓存可用时，跳过 composable 函数执行</li>
<li>指定子树的 Invalidating/recomposing</li>
<li>Having @Composable functions that target different types of trees with compile-time safety</li>
<li>Optimizing away comparisons of expressions we can determine will never change</li>
</ul>
<p>All potential future topics!</p>
<p>Let me know if this blog post helped you better understand Compose or not. If it didn’t, let me know what was confusing!</p>
<p>Have followup questions? <a href="https://twitter.com/intelligibabble">本文作者的 Twitter，推荐关注！</a>!</p>
<p>Interested in Compose and want to chat with others about it? Stop by the <code>#compose</code> channel on the <a href="https://kotlinlang.slack.com/">Kotlin Slack</a> (<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up?_ga=2.224677786.102200139.1558201416-402641717.1556213862">get an invite</a>)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Compose-首要原则&quot;&gt;&lt;a href=&quot;#Compose-首要原则&quot; class=&quot;headerlink&quot; title=&quot;Compose 首要原则&quot;&gt;&lt;/a&gt;Compose 首要原则&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;htt
    
    </summary>
    
      <category term="translate" scheme="https://invoker.me/categories/translate/"/>
    
    
      <category term="compose" scheme="https://invoker.me/tags/compose/"/>
    
  </entry>
  
  <entry>
    <title>home-server</title>
    <link href="https://invoker.me/home-server/"/>
    <id>https://invoker.me/home-server/</id>
    <published>2020-07-12T07:58:12.000Z</published>
    <updated>2025-06-29T04:49:36.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DDNS"><a href="#DDNS" class="headerlink" title="DDNS"></a>DDNS</h2><p>自动更新公网IP: 使用 <a href="https://github.com/TimothyYe/godns">godns</a> 这个项目，定时检查公网 IP，自动更新，</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name godns --restart=always -v /path/to/config.json:/usr/local/godns/config.json timothyye/godns:latest</span><br></pre></td></tr></table></figure>
<p>更多配置参数可以看文档 <strong>PS: SUB_DOMAIN 需要手动在域名商添加 A 记录</strong></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># example config:</span><br><span class="line"># 替换 $ID，$TOKEN，$DOMAIN，$SUB_DOMAIN</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;provider&quot;</span>: <span class="string">&quot;DNSPod&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;login_token&quot;</span>: <span class="string">&quot;$ID,$TOKEN&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;domains&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;domain_name&quot;</span>: <span class="string">&quot;$DOMAIN&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;sub_domains&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;$SUB_DOMAIN&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;ip_url&quot;</span>: <span class="string">&quot;https://myip.biturl.top&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;interval&quot;</span>: <span class="number">300</span>,</span><br><span class="line">  <span class="attr">&quot;user_agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML，like Gecko) Chrome/38.0.2125.111 Safari/537.36&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;ip_interface&quot;</span>: <span class="string">&quot;eth0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;socks5_proxy&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;notify&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;enabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;smtp_server&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;smtp_username&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;smtp_password&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;smtp_port&quot;</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="attr">&quot;send_to&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="HTTPS-证书-amp-amp-nginx-反代"><a href="#HTTPS-证书-amp-amp-nginx-反代" class="headerlink" title="HTTPS 证书 &amp;&amp; nginx 反代"></a>HTTPS 证书 &amp;&amp; nginx 反代</h2><p>HTTPS 证书使用 <a href="https://github.com/acmesh-official/acme.sh">acme.sh</a> 自动申请，更新。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先申请一下证书证书</span></span><br><span class="line">docker-compose run acme.sh --issue --dns dns_dp -d *.domain.com</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 以后就直接</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /home-proxy/docker-compose.yml</span></span><br><span class="line"><span class="comment"># docker-compose up -d</span></span><br><span class="line"><span class="comment"># 替换 $DNSPOD_ID, $DNSPOD_KEY, $NGINX_80, $NGINX_443</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">acme.sh:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">neilpang/acme.sh</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./acme.sh:/acme.sh:z&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DP_Id=$DNSPOD_ID</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DP_Key=$DNSPOD_KEY</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">daemon</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$NGINX_80:80&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$NGINX_443:443&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./acme.sh:/etc/nginx/certs&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./nginx/conf.d/:/etc/nginx/conf.d:z&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./nginx/log/:/var/log/nginx/:z&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ENV=production</span></span><br></pre></td></tr></table></figure>
<p>nginx 配置<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> /home-proxy/nginx/conf.d/proxy.conf</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 替换 domain.com, <span class="variable">$SERVICE_IP</span>, <span class="variable">$PORT</span></span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name *.domain.com;</span><br><span class="line">    return 301 https://$host$request_uri;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    listen      443 ssl http2;</span><br><span class="line">    server_name xxx.domain.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass https://$SERVICE_IP:$PORT;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection &quot;upgrade&quot;; </span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header X-NginX-Proxy true;</span><br><span class="line">        proxy_ssl_server_name on;</span><br><span class="line">        proxy_ssl_name $host;</span><br><span class="line">    &#125;</span><br><span class="line">    ssl_certificate         /etc/nginx/certs/*.domain.com/fullchain.cer;</span><br><span class="line">    ssl_certificate_key     /etc/nginx/certs/*.domain.com/*.domain.com.key;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<h2 id="路由器端口转发"><a href="#路由器端口转发" class="headerlink" title="路由器端口转发"></a>路由器端口转发</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">                    +----------------+</span><br><span class="line">                    |                |</span><br><span class="line">                    |     光猫        |</span><br><span class="line">                    |                |</span><br><span class="line">                    +-------+--------+</span><br><span class="line">                            |</span><br><span class="line">                            v</span><br><span class="line">                    +-------+--------+</span><br><span class="line">                    |                |</span><br><span class="line">                    |     路由器      |</span><br><span class="line">                    |                |</span><br><span class="line">                    +-------+--------+ </span><br><span class="line">                            |                  </span><br><span class="line">      +---------------------+------------------+</span><br><span class="line">      |                     |                  |</span><br><span class="line">      |                     v                  |</span><br><span class="line">+-----v-----+        +------+------+    +------v------+</span><br><span class="line">|           |        |             |    |             |</span><br><span class="line">|   nginx   |        |   service   |    |   service   |</span><br><span class="line">|           |        |             |    |             |</span><br><span class="line">+-----------+        +-------------+    +-------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>联通光猫开启 DMZ，流量转给路由器。路由器开启端口转发，交给 nginx (联通屏蔽 80/443，自行选择安全端口)，最后由 nginx 分发到各 service。带小绿锁的公网 home server 就配好了。</p>
<p>唯一的遗憾就是每次输域名都要自带端口，自用的话问题不大，公网直连回家还是很快的，舒服。</p>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul>
<li><a href="https://www.daxiaju.club/2019/08/07/nginx-acme-docker/">https://www.daxiaju.club/2019/08/07/nginx-acme-docker/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;DDNS&quot;&gt;&lt;a href=&quot;#DDNS&quot; class=&quot;headerlink&quot; title=&quot;DDNS&quot;&gt;&lt;/a&gt;DDNS&lt;/h2&gt;&lt;p&gt;自动更新公网IP: 使用 &lt;a href=&quot;https://github.com/TimothyYe/godns&quot;&gt;godn
    
    </summary>
    
      <category term="折腾" scheme="https://invoker.me/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="nginx" scheme="https://invoker.me/tags/nginx/"/>
    
      <category term="ddns" scheme="https://invoker.me/tags/ddns/"/>
    
      <category term="https" scheme="https://invoker.me/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>导出 kindle 个人文档</title>
    <link href="https://invoker.me/kindle-prc-export/"/>
    <id>https://invoker.me/kindle-prc-export/</id>
    <published>2020-03-08T05:33:57.000Z</published>
    <updated>2025-06-29T04:49:36.612Z</updated>
    
    <content type="html"><![CDATA[<p>前几天下单了小米电纸书，虽然可以装 kindle apk，但是性能捉急体验极差电量掉得也快。<br>准备把 kindle 账号上的漫画导出来看。</p>
<h2 id="导出个人文档"><a href="#导出个人文档" class="headerlink" title="导出个人文档"></a>导出个人文档</h2><p>首先 Kindle 个人文档不能直接在 kindle 内容管理页面下载(至少我没发现)。<br>我是在手机上下载好，然后到 <code>/sdcard/kindle/</code> 目录下复制出来的。</p>
<h2 id="PRC-转-EPUB-格式"><a href="#PRC-转-EPUB-格式" class="headerlink" title="PRC 转 EPUB 格式"></a>PRC 转 EPUB 格式</h2><p>使用 Calibre 进行格式转换。因为我是漫画，在样式上出现一些问题。<br>漫画从 prc 转成 epub 后，只有封面展示正常，内容部分在电子书上渲染出来，有错位空白页等问题。</p>
<p>用 Calibre 电子书编辑器打开，发现是 calibre 提供的 css 样式导致的问题。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fs&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;calibre2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Comic Book Images&quot;</span> <span class="attr">class</span>=<span class="string">&quot;singlepage&quot;</span> <span class="attr">height</span>=<span class="string">&quot;1092&quot;</span> <span class="attr">src</span>=<span class="string">&quot;images_00007.jpeg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;700&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>举个例子，这是其中一页内容。不是特别了解 css 和 epub 电子书格式，总之是 calibre 默认的样式并不适合漫画电子书渲染。<br>找到问题，修改样式肯定是可以的，但几十本书手动改可太蠢了。<br>研究了半天 calibre 的功能，转换工具提供的 css 自定义并不会用，正则匹配替换感觉也有些复杂。<br>还好搜索过程中发现了一个多看电子书的 feature。</p>
<h2 id="添加多看漫画样式"><a href="#添加多看漫画样式" class="headerlink" title="添加多看漫画样式"></a>添加多看漫画样式</h2><blockquote>
<h2 id="上下居中图"><a href="#上下居中图" class="headerlink" title="上下居中图"></a>上下居中图</h2><p>这个属性在多看漫画书中用的比较多，当然你也可以用到普通的书里面。语法如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">spine</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">itemref</span> <span class="attr">idref</span>=<span class="string">&quot;coverpage&quot;</span> <span class="attr">properties</span>=<span class="string">&quot;duokan-page-fullscreen&quot;</span>&gt;</span></span><br><span class="line">   ……</span><br><span class="line"><span class="tag">&lt;/<span class="name">spine</span>&gt;</span></span><br></pre></td></tr></table></figure><br>同样，对应的html文件只需要一张图片即可，不需要别的文字或者代码，就算写了多看也不会显示出来，而只会将图片上下居中显示。  </p>
<p>作者：<a href="https://www.jianshu.com/u/c957fac4abb2">hyx108</a><br>链接：<a href="https://www.jianshu.com/p/ce7fa8b83da8">https://www.jianshu.com/p/ce7fa8b83da8</a></p>
</blockquote>
<p>解压电子书，给 <code>/EPUB/conten.opf</code> 文件 spine 下的 itemref 加上 <code>duokan-page-fullscreen</code> 属性即可。</p>
<p>我们使用 <a href="https://pypi.org/project/EbookLib/">EbookLib</a> 这个库写段脚本。<br>目前并没有提供接口直接编辑 <code>content.opf</code>，直接暴力在源码里把这个属性加上了。</p>
<h3 id="修改-EbookLib-源文件"><a href="#修改-EbookLib-源文件" class="headerlink" title="修改 EbookLib 源文件"></a>修改 EbookLib 源文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># epub.py</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EpubWriter</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改 epub 输出函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_write_opf_spine</span>(<span class="params">self, root, ncx_id</span>):</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 直接在这把属性加上</span></span><br><span class="line">        opts[<span class="string">&#x27;properties&#x27;</span>] = <span class="string">&#x27;duokan-page-fitwindow&#x27;</span></span><br><span class="line">        etree.SubElement(spine, <span class="string">&#x27;itemref&#x27;</span>, opts)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="convert-脚本"><a href="#convert-脚本" class="headerlink" title="convert 脚本"></a>convert 脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> ebooklib</span><br><span class="line"><span class="keyword">from</span> ebooklib <span class="keyword">import</span> epub</span><br><span class="line"><span class="keyword">from</span> ebooklib.plugins.base <span class="keyword">import</span> BasePlugin</span><br><span class="line"></span><br><span class="line">index = <span class="number">1</span></span><br><span class="line">opts = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> glob.glob(<span class="string">&quot;/path/to/your/*.epub&quot;</span>):</span><br><span class="line">    book = epub.read_epub(file)</span><br><span class="line">    epub.write_epub(file+<span class="string">&quot;.covert&quot;</span>, book, opts)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(index) + <span class="string">&quot; done&quot;</span>)</span><br><span class="line">    index = index + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>over~</strong></p>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul>
<li><a href="https://www.jianshu.com/p/ce7fa8b83da8">https://www.jianshu.com/p/ce7fa8b83da8</a></li>
<li><a href="https://pypi.org/project/EbookLib/">https://pypi.org/project/EbookLib/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天下单了小米电纸书，虽然可以装 kindle apk，但是性能捉急体验极差电量掉得也快。&lt;br&gt;准备把 kindle 账号上的漫画导出来看。&lt;/p&gt;
&lt;h2 id=&quot;导出个人文档&quot;&gt;&lt;a href=&quot;#导出个人文档&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
      <category term="折腾" scheme="https://invoker.me/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="kindle" scheme="https://invoker.me/tags/kindle/"/>
    
      <category term="漫画" scheme="https://invoker.me/tags/%E6%BC%AB%E7%94%BB/"/>
    
      <category term="epub" scheme="https://invoker.me/tags/epub/"/>
    
      <category term="prc" scheme="https://invoker.me/tags/prc/"/>
    
  </entry>
  
  <entry>
    <title>OpenWrt clash 网关</title>
    <link href="https://invoker.me/openwrt-clash/"/>
    <id>https://invoker.me/openwrt-clash/</id>
    <published>2020-03-06T13:44:13.000Z</published>
    <updated>2025-06-29T04:49:36.615Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>记录下自己的路由器配置。这个方案用了几个月了，大部分时间没啥问题。</p>
</blockquote>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul>
<li>OpenWrt</li>
<li>Clash: 主要自带 geoip，不用自己折腾太多规则</li>
<li>Clash 控制面板: <a href="https://github.com/haishanh/yacd">https://github.com/haishanh/yacd</a></li>
</ul>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>搭一个 OpenWrt 做网关转发流量，通过 iptable 把流量交给 clash<br>OpenWrt 只做透明代理</p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="配置-OpenWrt"><a href="#配置-OpenWrt" class="headerlink" title="配置 OpenWrt"></a>配置 OpenWrt</h3><p>给 OpenWrt 一个静态 ip<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/config/network</span><br><span class="line"></span><br><span class="line">config interface &#x27;loopback&#x27;</span><br><span class="line">        option ifname &#x27;lo&#x27;</span><br><span class="line">        option proto &#x27;static&#x27;</span><br><span class="line">        option ipaddr &#x27;127.0.0.1&#x27;</span><br><span class="line">        option netmask &#x27;255.0.0.0&#x27;</span><br><span class="line"></span><br><span class="line">config globals &#x27;globals&#x27;</span><br><span class="line">        option ula_prefix &#x27;fda4:2477:ac44::/48&#x27;</span><br><span class="line"></span><br><span class="line">config interface &#x27;lan&#x27;</span><br><span class="line">        option type &#x27;bridge&#x27;</span><br><span class="line">        option ifname &#x27;eth0&#x27;</span><br><span class="line">        option proto &#x27;static&#x27;</span><br><span class="line">        option ipaddr &#x27;192.168.1.xxx&#x27;</span><br><span class="line">        option netmask &#x27;255.255.255.0&#x27;</span><br><span class="line">        option ip6assign &#x27;60&#x27;</span><br><span class="line">        option gateway &#x27;192.168.1.1&#x27;</span><br><span class="line">        list dns &#x27;192.168.1.1&#x27;</span><br></pre></td></tr></table></figure></p>
<h3 id="配置-Clash"><a href="#配置-Clash" class="headerlink" title="配置 Clash"></a>配置 Clash</h3><ol>
<li>下个最新版 clash</li>
</ol>
<p><a href="https://github.com/Dreamacro/clash/releases">https://github.com/Dreamacro/clash/releases</a><br>下载自己需要的版本<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置文件 config.yaml 和 clash 都扔里就行</span></span><br><span class="line">mkdir /root/clash/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Country.mmdb 最近总是下载失败, 可以试着跑一下 看看有没有啥问题</span></span><br><span class="line"><span class="built_in">cd</span> /root/clash/</span><br><span class="line">./clash -d .</span><br></pre></td></tr></table></figure></p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config.yaml</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">58652</span></span><br><span class="line"><span class="attr">socks-port:</span> <span class="number">58653</span></span><br><span class="line"><span class="comment"># 透明代理端口</span></span><br><span class="line"><span class="attr">redir-port:</span> <span class="number">58654</span></span><br><span class="line"></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mode:</span> <span class="string">Rule</span></span><br><span class="line"></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">info</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制面板端口</span></span><br><span class="line"><span class="attr">external-controller:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:xxxx</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">listen:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:53</span></span><br><span class="line">  <span class="attr">ipv6:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">enhance-mode:</span> <span class="string">redir-host</span></span><br><span class="line">  <span class="attr">nameserver:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;tls://dns.rubyfish.cn:853&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;tls://1.1.1.1:853&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;tcp://1.1.1.1&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;tls://dns.google&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">119.29</span><span class="number">.29</span><span class="number">.29</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Proxy:</span></span><br><span class="line">  <span class="comment"># 自己发挥</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Socks5Proxy</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">socks5</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">1080</span></span><br><span class="line"><span class="attr">Proxy Group:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Proxy</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">select</span></span><br><span class="line">    <span class="attr">proxies:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Socks5Proxy</span></span><br><span class="line"><span class="attr">Rule:</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># GeoIP China</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOIP,CN,Direct</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">MATCH,Proxy</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>没啥问题给 clash 写个 service 自启</li>
</ol>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/init.d/clash</span><br><span class="line">service clash <span class="built_in">enable</span></span><br><span class="line">service clash start</span><br></pre></td></tr></table></figure>
<p><code>/etc/init.d/clash</code> 文件内容复制下边这个<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh /etc/rc.common</span><br><span class="line"># Example script</span><br><span class="line"># Copyright (C) 2007 OpenWrt.org</span><br><span class="line"></span><br><span class="line">USE_PROCD=1</span><br><span class="line">START=95</span><br><span class="line"></span><br><span class="line">start_service() &#123;</span><br><span class="line">        procd_open_instance</span><br><span class="line">        procd_set_param respawn</span><br><span class="line">        procd_set_param stderr 1</span><br><span class="line">        procd_set_param stdout 1</span><br><span class="line">        procd_set_param command /root/clash/clash -d /root/clash/</span><br><span class="line">        procd_close_instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="配置-OpenWrt-iptable"><a href="#配置-OpenWrt-iptable" class="headerlink" title="配置 OpenWrt iptable"></a>配置 OpenWrt iptable</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># /etc/firewall.user</span><br><span class="line">iptables -t nat -N clash</span><br><span class="line">iptables -t nat -A clash -d 192.168/16 -j RETURN</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp -j clash</span><br><span class="line">iptables -t nat -A clash -p tcp -j REDIRECT --to-ports 58654</span><br><span class="line"></span><br><span class="line">iptables -t nat -A PREROUTING -p udp -m udp --dport 53 -j DNAT --to-destination 192.168.1.xxx:53</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="客户端设备"><a href="#客户端设备" class="headerlink" title="客户端设备"></a>客户端设备</h3><p>我的设备都是手动配的网关和 DNS，有时需要切下代理，打开 <a href="http://yacd.haishan.me/">http://yacd.haishan.me/</a> 这个面板基本够用了</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li>时不时的不能打开 google.com， 但是 google.com.hk 没问题，应该是 clash dns 的问题  </li>
<li>微信语音视频不通，zoom 音频不通，怀疑是 udp 问题，不清楚</li>
<li>clash dns 总是出问题，现在没啥动力，忍了</li>
</ol>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul>
<li><a href="https://github.com/Dreamacro/clash">https://github.com/Dreamacro/clash</a></li>
<li><a href="https://github.com/Dreamacro/clash/issues/158">https://github.com/Dreamacro/clash/issues/158</a></li>
<li>…</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记录下自己的路由器配置。这个方案用了几个月了，大部分时间没啥问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h2&gt;&lt;ul&gt;

    
    </summary>
    
      <category term="折腾" scheme="https://invoker.me/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="openwrt" scheme="https://invoker.me/tags/openwrt/"/>
    
      <category term="clash" scheme="https://invoker.me/tags/clash/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin DSL 应用</title>
    <link href="https://invoker.me/kotlin-dsl/"/>
    <id>https://invoker.me/kotlin-dsl/</id>
    <published>2018-05-26T14:41:56.000Z</published>
    <updated>2025-06-29T04:49:36.613Z</updated>
    
    <content type="html"><![CDATA[<p>kotlin 宣传时的一个卖点就是 dsl</p>
<p>使用 kotlin ，配合 <a href="https://kotlinlang.org/docs/reference/lambdas.html#function-literals-with-receiver">function literals with receiver</a> 特性可以构建类型安全，静态类型的 builder</p>
<p>dsl 能做什么? Android 的 anko 库是一个非常好的例子，anko 提出使用 kotlin dsl 代替 xml 书写布局。 </p>
<p>各种优势：</p>
<ul>
<li>It is not typesafe;</li>
<li>It is not null-safe;</li>
<li>It forces you to write almost the same code for every layout you make;</li>
<li>XML is parsed on the device wasting CPU time and battery;</li>
<li>Most of all, it allows no code reuse.</li>
</ul>
<p>ps. 一个问题，就是预览布局效果，xml 毕竟是从 android 最初一路走过来的，目前的表现没有太大问题；anko 刚起步，去年刚用时官方提供的预览插件基本不可以，不过看最近<a href="https://plugins.jetbrains.com/plugin/7734-anko-support">这个插件 (18.05.15) </a>有更新，有时间试下。</p>
<p><strong>好，扯了这么多，其实我只是想说…终于在代码里用上这个特性了 23333</strong></p>
<p>贴一下</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">webPage</span><span class="params">(<span class="keyword">init</span>: <span class="type">WXWebpageObject</span>.() -&gt; <span class="type">Unit</span>)</span></span>: WXWebpageObject = WXWebpageObject().apply(<span class="keyword">init</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">mediaMessage</span><span class="params">(<span class="keyword">init</span>: <span class="type">suspend</span> <span class="type">WXMediaMessage</span>.() -&gt; <span class="type">Unit</span>)</span></span>: WXMediaMessage = WXMediaMessage().apply &#123; <span class="keyword">init</span>() &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">image</span><span class="params">(<span class="keyword">init</span>: <span class="type">suspend</span> <span class="type">WXImageObject</span>.() -&gt; <span class="type">Unit</span>)</span></span>: WXImageObject = WXImageObject().apply &#123; <span class="keyword">init</span>() &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">miniProgram</span><span class="params">(<span class="keyword">init</span>: <span class="type">suspend</span> <span class="type">WXMiniProgramObject</span>.() -&gt; <span class="type">Unit</span>)</span></span>: WXMiniProgramObject = WXMiniProgramObject().apply &#123; <span class="keyword">init</span>() &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">wechatRequestBuilder</span><span class="params">(<span class="keyword">init</span>: <span class="type">suspend</span> <span class="type">SendMessageToWX</span>.<span class="type">Req</span>.() -&gt; <span class="type">Unit</span>)</span></span>: SendMessageToWX.Req = SendMessageToWX.Req().apply &#123; <span class="keyword">init</span>() &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> SendMessageToWX.Req.<span class="title">send</span><span class="params">()</span></span> = WXApi.wxApi.sendReq(<span class="keyword">this</span>)</span><br></pre></td></tr></table></figure>
<p>国内这些分享集成真是要了老命，难用的一笔，说多了都是泪。<br>这块使用 dsl 构建分享 Message，配合 coroutines 异步请求网络数据,感觉上是不是好(bing)了(mei)点(you)，安利一波</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">shareMiniProgram</span><span class="params">(webUrl: <span class="type">String</span>, path: <span class="type">String</span>, title: <span class="type">String</span>, description: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                             image: <span class="type">String</span>)</span></span> = async(UI) &#123;</span><br><span class="line">    wechatRequestBuilder &#123;</span><br><span class="line">        message = mediaMessage &#123;</span><br><span class="line">            mediaObject = miniProgram &#123;</span><br><span class="line">                webpageUrl = webUrl</span><br><span class="line">                miniprogramType = WXMiniProgramObject.MINIPTOGRAM_TYPE_RELEASE</span><br><span class="line">                userName = WECHAT_USER_NAME</span><br><span class="line">                <span class="keyword">this</span>.path = path</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Application.app?.toast(<span class="string">&quot;download image&quot;</span>)</span><br><span class="line">            <span class="keyword">val</span> <span class="keyword">data</span> = async(CommonPool) &#123;</span><br><span class="line">                ImageLoader.loadImageSync(Application.app, image)</span><br><span class="line">            &#125;.await().ifNull &#123;</span><br><span class="line">                Application.app?.toast(<span class="string">&quot;image load failed&quot;</span>)</span><br><span class="line">            &#125; ?: <span class="keyword">return</span><span class="symbol">@mediaMessage</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> bitmap = <span class="keyword">data</span>.takeIf &#123;</span><br><span class="line">                <span class="keyword">data</span>.wechatSize() &lt; <span class="number">120</span> * <span class="number">1024</span></span><br><span class="line">            &#125; ?: <span class="keyword">data</span>.scale((<span class="number">120</span> * <span class="number">1024f</span>) / <span class="keyword">data</span>.wechatSize())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.title = title</span><br><span class="line">            <span class="keyword">this</span>.description = description</span><br><span class="line">            thumbData = bitmap.toByteArray()</span><br><span class="line">            transaction = generateShareId()</span><br><span class="line">        &#125;</span><br><span class="line">        scene = SendMessageToWX.Req.WXSceneSession</span><br><span class="line">    &#125;.send()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>赠品</strong>：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 微信图片处理</span><br><span class="line">https://gist.github.com/tiiime/8673ddd97320cf18a468140add036641</span><br><span class="line">// ifNull</span><br><span class="line">https://gist.github.com/tiiime/9a2edb18f7f214b42d24b50ec28d2f46</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;kotlin 宣传时的一个卖点就是 dsl&lt;/p&gt;
&lt;p&gt;使用 kotlin ，配合 &lt;a href=&quot;https://kotlinlang.org/docs/reference/lambdas.html#function-literals-with-receiver&quot;&gt;f
    
    </summary>
    
    
      <category term="kotlin" scheme="https://invoker.me/tags/kotlin/"/>
    
      <category term="coroutines" scheme="https://invoker.me/tags/coroutines/"/>
    
  </entry>
  
  <entry>
    <title>Java 如何正确结束线程</title>
    <link href="https://invoker.me/java-safe-stop-thread/"/>
    <id>https://invoker.me/java-safe-stop-thread/</id>
    <published>2018-04-02T15:06:38.000Z</published>
    <updated>2025-06-29T04:49:36.605Z</updated>
    
    <content type="html"><![CDATA[<p>我之前只是知道有两种做法</p>
<ul>
<li>while 一个 flag ，通过控制 flag</li>
<li>另一个就是 <code>Thread::intercept()</code>，加 <code>try ... catch</code></li>
</ul>
<p>好吧实际工作里基本没有 kill 线程的经验，现在来看看</p>
<p>主要是 interrupt ，因为 while 方法其实算不上什么停止线程，当 while 内的代码块阻塞了，根本走不到下一次 flag 判断。</p>
<p>直接看源码里的注释：</p>
<blockquote>
<p><a href="https://developer.android.com/reference/java/lang/Thread.html#interrupt()">https://developer.android.com/reference/java/lang/Thread.html#interrupt()</a></p>
</blockquote>
<ol>
<li>首先会进行检查是否拥有修改当前线程的权限，权限异常会抛出 <a href="https://developer.android.com/reference/java/lang/SecurityException.html">SecurityException</a></li>
<li>调用 interrupt ，如果此时线程阻塞在 <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a> class 的 <a href="https://developer.android.com/reference/java/lang/Object.html#wait%28%29">wait()</a>, <a href="https://developer.android.com/reference/java/lang/Object.html#wait(long">wait(long)</a>), or <a href="https://developer.android.com/reference/java/lang/Object.html#wait%28long,%20int%29">wait(long, int)</a> 方法 , 或是当前 class 的 <a href="https://developer.android.com/reference/java/lang/Thread.html#join%28%29">join()</a>, <a href="https://developer.android.com/reference/java/lang/Thread.html#join%28long%29">join(long)</a>, <a href="https://developer.android.com/reference/java/lang/Thread.html#join%28long,%20int%29">join(long, int)</a>, <a href="https://developer.android.com/reference/java/lang/Thread.html#sleep%28long%29">sleep(long)</a>, or <a href="https://developer.android.com/reference/java/lang/Thread.html#sleep%28long,%20int%29">sleep(long, int)</a>方法，会清除线程 interrupt 状态，并抛出 <a href="https://developer.android.com/reference/java/lang/InterruptedException.html">InterruptedException</a>.</li>
<li>调用 interrupt ，如果此时线程阻塞在一个 <a href="https://developer.android.com/reference/java/nio/channels/InterruptibleChannel.html">InterruptibleChannel</a> 的 I/O 操作上，channel 将会被关闭，设置线程的 interrupt 状态，线程收到 <a href="https://developer.android.com/reference/java/nio/channels/ClosedByInterruptException.html">ClosedByInterruptException</a></li>
<li>调用 interrupt ，如果此时线程 block 在一个 <a href="https://developer.android.com/reference/java/nio/channels/Selector.html">Selector</a>，会立即设置线程的 interrupt 状态，并从 selection 操作中返回，也许返回一个非零值，就像执行 selector 的 <a href="https://developer.android.com/reference/java/nio/channels/Selector.html#wakeup%28%29">wakeup</a> 方法一样。</li>
<li><strong>调用 interrupt ，如果以上情况都不是，会设置线程的 interrupt 状态</strong></li>
</ol>
<p>直接看第二条和第五条</p>
<p>第 2 条说的是阻塞在这些个方法时调用 interrupt 会抛出 InterruptedException ，这就是我们为啥要加 <code>try ... catch</code></p>
<p>然后第 5 条，如果以上几条 case 都不是，调用 interrupt 只会设置线程的 interrupt status……(好像知道面试为啥挂了</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// https://stackoverflow.com/a/10962613/4097210</span><br><span class="line">if (Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">  // cleanup and stop execution</span><br><span class="line">  // for example a break in a loop</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>再翻译一下这个 Stack Overflow 的回答</p>
<blockquote>
<p>Q: <a href="https://stackoverflow.com/questions/10961714/how-to-properly-stop-the-thread-in-java">https://stackoverflow.com/questions/10961714/how-to-properly-stop-the-thread-in-java</a><br>A: <a href="https://stackoverflow.com/a/10962613/4097210">https://stackoverflow.com/a/10962613/4097210</a></p>
</blockquote>
<p><code>Thread.interrupt()</code> 是个不错的方法。如果你的代码处于可中断的阻塞调用  (比如  <code>Thread.sleep</code>  或是使用 java.nio Channel 操作)，你可以从中立即退出。</p>
<p>如果使用 flag，只能等这段阻塞代码跑完，再次进入 flag condition 判断时终止。但有些情况不得不用这个方法，比如使用标准 <code>InputStream</code>/<code>OutputStream</code>   api 时，它不是  interruptable 的。</p>
<p>这种情况，调用 interrupt 并不会终止 IO，但是你可以在代码(可以安全 stop 线程并清理资源的位置)加上这么一句话：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">  // cleanup and stop execution</span><br><span class="line">  // for example a break in a loop</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就像我上面说的 <code>Thread.interrupt()</code> 的优势在于可以立即退出，flag 无论如何做不到这点。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我之前只是知道有两种做法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;while 一个 flag ，通过控制 flag&lt;/li&gt;
&lt;li&gt;另一个就是 &lt;code&gt;Thread::intercept()&lt;/code&gt;，加 &lt;code&gt;try ... catch&lt;/code&gt;&lt;/li&gt;
&lt;/ul
    
    </summary>
    
      <category term="learn" scheme="https://invoker.me/categories/learn/"/>
    
    
      <category term="java" scheme="https://invoker.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>求解：顺时针输出二维数组</title>
    <link href="https://invoker.me/clockwise-matrix/"/>
    <id>https://invoker.me/clockwise-matrix/</id>
    <published>2018-03-17T02:39:16.000Z</published>
    <updated>2025-06-29T04:49:36.603Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个 n*n 的二维数组矩阵矩阵，以顺时针顺序输出<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">举个栗子：</span><br><span class="line">[ 0, 1, 2,</span><br><span class="line">  3, 4, 5,</span><br><span class="line">  6, 7, 8 ]</span><br><span class="line">输出： 0, 1, 2, 5, 8, 7, 6, 3, 4</span><br></pre></td></tr></table></figure></p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> cursor = Cursor(-<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">val</span> rect = makeRect(<span class="number">3</span>)</span><br><span class="line">    rect.print()</span><br><span class="line"></span><br><span class="line">    clockwise(rect, <span class="number">0</span>, cursor)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typealias</span> Matrix = Array&lt;IntArray&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Cursor</span></span>(<span class="keyword">var</span> x: <span class="built_in">Int</span>, <span class="keyword">var</span> y: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">up</span><span class="params">()</span></span> = apply &#123; y -= <span class="number">1</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">down</span><span class="params">()</span></span> = apply &#123; y += <span class="number">1</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">left</span><span class="params">()</span></span> = apply &#123; x -= <span class="number">1</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">right</span><span class="params">()</span></span> = apply &#123; x += <span class="number">1</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">clockwise</span><span class="params">(rect: <span class="type">Matrix</span>, level: <span class="type">Int</span>, cursor: <span class="type">Cursor</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> rectLength = rect[<span class="number">0</span>].size</span><br><span class="line">    <span class="keyword">val</span> currentLength = rectLength - <span class="number">2</span> * level</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until currentLength) &#123;</span><br><span class="line">        cursor.right()</span><br><span class="line">        print(rect[cursor])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until currentLength - <span class="number">1</span>) &#123;</span><br><span class="line">        cursor.down()</span><br><span class="line">        print(rect[cursor])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until currentLength - <span class="number">1</span>) &#123;</span><br><span class="line">        cursor.left()</span><br><span class="line">        print(rect[cursor])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until currentLength - <span class="number">2</span>) &#123;</span><br><span class="line">        cursor.up()</span><br><span class="line">        print(rect[cursor])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentLength &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        clockwise(rect, level + <span class="number">1</span>, cursor)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">makeRect</span><span class="params">(n: <span class="type">Int</span>)</span></span> = Array(n) &#123; IntArray(n) &#125;.apply &#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n * n) &#123;</span><br><span class="line">        <span class="keyword">this</span>[i / n][i % n] = i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> Matrix.<span class="title">print</span><span class="params">()</span></span> = forEach &#123; println(it.joinToString(<span class="string">&quot;,&quot;</span>)) &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> Matrix.<span class="title">get</span><span class="params">(cursor: <span class="type">Cursor</span>)</span></span> = <span class="keyword">this</span>[cursor.y][cursor.x]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个 n*n 的二维数组矩阵矩阵，以顺时针顺序输出&lt;br&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;spa
    
    </summary>
    
    
      <category term="练习" scheme="https://invoker.me/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>[翻译] Flutter for Android part 3</title>
    <link href="https://invoker.me/flutter-for-android-part-3/"/>
    <id>https://invoker.me/flutter-for-android-part-3/</id>
    <published>2018-03-03T05:47:37.000Z</published>
    <updated>2025-06-29T04:49:36.604Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://flutter.io/flutter-for-android/#working-with-text">https://flutter.io/flutter-for-android/#working-with-text</a></p>
</blockquote>
<h1 id="Working-with-Text"><a href="#Working-with-Text" class="headerlink" title="Working with Text"></a>Working with Text</h1><h2 id="如何自定义-Text-widgets-字体"><a href="#如何自定义-Text-widgets-字体" class="headerlink" title="如何自定义 Text widgets 字体"></a>如何自定义 Text widgets 字体</h2><p>Android 开发中(比如 Android O)，你要创建好字体资源文件，并将它赋值给 Textview 的 FontFamily 属性。</p>
<p>Flutter 需要两个步骤：</p>
<ol>
<li>首先将字体文件复制到项目(最佳实践是创建一个 asset 文件夹扔里边)</li>
<li><p>然后在 pubspec.yaml 配置文件中声明使用</p>
 <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fonts:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">family:</span> <span class="string">MyCustomFont</span></span><br><span class="line">     <span class="attr">fonts:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="attr">asset:</span> <span class="string">fonts/MyCustomFont.ttf</span></span><br><span class="line">       <span class="bullet">-</span> <span class="attr">style:</span> <span class="string">italic</span></span><br></pre></td></tr></table></figure></li>
<li>最后在代码中实用 <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">    appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">      title: <span class="keyword">new</span> Text(<span class="string">&quot;Sample App&quot;</span>),</span><br><span class="line">    ),</span><br><span class="line">    body: <span class="keyword">new</span> Center(</span><br><span class="line">      child: <span class="keyword">new</span> Text(</span><br><span class="line">        <span class="string">&#x27;This is a custom font text&#x27;</span>,</span><br><span class="line">        style: <span class="keyword">new</span> TextStyle(fontFamily: <span class="string">&#x27;MyCustomFont&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="如何为-Text-widgets-设置样式"><a href="#如何为-Text-widgets-设置样式" class="headerlink" title="如何为 Text widgets 设置样式"></a>如何为 Text widgets 设置样式</h2>能设的样式那可多了去了<br>TextWidget 的 style 属性接受一个 TextStyle 对象，比如下面这些属性：</li>
</ol>
<ul>
<li>color</li>
<li>decoration</li>
<li>decorationColor</li>
<li>decorationStyle</li>
<li>fontFamily</li>
<li>fontSize</li>
<li>fontStyle</li>
<li>fontWeight</li>
<li>hashCode</li>
<li>height</li>
<li>inherit</li>
<li>letterSpacing</li>
<li>textBaseline</li>
<li>wordSpacing</li>
</ul>
<h1 id="Form-Input"><a href="#Form-Input" class="headerlink" title="Form Input"></a>Form Input</h1><h2 id="什么对应-Input-的-“hint”"><a href="#什么对应-Input-的-“hint”" class="headerlink" title="什么对应 Input 的 “hint”"></a>什么对应 Input 的 “hint”</h2><p> 构造一个 InputDecoration 对象传给Text Widget 的 decoration 属性<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">body: <span class="keyword">new</span> Center(</span><br><span class="line">  child: <span class="keyword">new</span> TextField(</span><br><span class="line">    decoration: <span class="keyword">new</span> InputDecoration(hintText: <span class="string">&quot;This is a hint&quot;</span>),</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<h2 id="如何显示验证错误提示"><a href="#如何显示验证错误提示" class="headerlink" title="如何显示验证错误提示"></a>如何显示验证错误提示</h2><p>错误提示我们也用 InputDecoration 实现。当然你可不想界面刚出来就提示错误对吧，我们得在用户输入错误数据后再显示错误提示，只要动态的更新 InputDecoration 即可实现。</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> SampleApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Sample App&#x27;</span>,</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">new</span> SampleAppPage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleAppPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  SampleAppPage(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _SampleAppPageState createState() =&gt; <span class="keyword">new</span> _SampleAppPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_SampleAppPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SampleAppPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> _errorText;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">&quot;Sample App&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">new</span> Center(</span><br><span class="line">        child: <span class="keyword">new</span> TextField(</span><br><span class="line">          onSubmitted: (<span class="built_in">String</span> text) &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              <span class="keyword">if</span> (!isEmail(text)) &#123;</span><br><span class="line">                _errorText = <span class="string">&#x27;Error: This is not an email&#x27;</span>;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                _errorText = <span class="keyword">null</span>;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">          decoration: <span class="keyword">new</span> InputDecoration(hintText: <span class="string">&quot;This is a hint&quot;</span>, errorText: _getErrorText()),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _getErrorText() &#123;</span><br><span class="line">    <span class="keyword">return</span> _errorText;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> isEmail(<span class="built_in">String</span> em) &#123;</span><br><span class="line">    <span class="built_in">String</span> emailRegexp =</span><br><span class="line">        <span class="string">r&#x27;^(([^&lt;&gt;()[\]\\.,;:\s@\&quot;]+(\.[^&lt;&gt;()[\]\\.,;:\s@\&quot;]+)*)|(\&quot;.+\&quot;))@((\[[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]&#123;2,&#125;))$&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">RegExp</span> regExp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> regExp.hasMatch(em);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Flutter-Plugins"><a href="#Flutter-Plugins" class="headerlink" title="Flutter Plugins"></a>Flutter Plugins</h1><h2 id="如何访问-GPS-传感器"><a href="#如何访问-GPS-传感器" class="headerlink" title="如何访问 GPS 传感器"></a>如何访问 GPS 传感器</h2><p>To access the GPS sensor you can use the community plugin  <a href="https://pub.dartlang.org/packages/location">https://pub.dartlang.org/packages/location</a></p>
<h2 id="如何访问-Camera"><a href="#如何访问-Camera" class="headerlink" title="如何访问 Camera"></a>如何访问 Camera</h2><p>A popular community plugin to access the camera is  <a href="https://pub.dartlang.org/packages/image_picker">https://pub.dartlang.org/packages/image_picker</a></p>
<h2 id="如何使用-Facebook-登录"><a href="#如何使用-Facebook-登录" class="headerlink" title="如何使用 Facebook 登录"></a>如何使用 Facebook 登录</h2><p>To access Facebook Connect functionality you can use  <a href="https://pub.dartlang.org/packages/flutter_facebook_connect">https://pub.dartlang.org/packages/flutter_facebook_connect</a>  .</p>
<h2 id="如何自己实现-native-集成"><a href="#如何自己实现-native-集成" class="headerlink" title="如何自己实现 native 集成"></a>如何自己实现 native 集成</h2><p>If there is platform specific functionality that Flutter or its community Plugins are missing then you can build your own following this tutorial<a href="https://flutter.io/developing-packages/">https://flutter.io/developing-packages/</a>  .</p>
<p>总的来说，Flutter plugin 框架用起来很像 Android 里的 EventBus：你发送一个消息，等待 receiver 处理完毕，再将结果传回给你，只不过 Flutter 的 receiver 变成了 iOS 或是 Android。</p>
<h2 id="如何使用-NDK"><a href="#如何使用-NDK" class="headerlink" title="如何使用 NDK"></a>如何使用 NDK</h2><p>得自定义 plugin，先和你的 android 应用通信，等待它去执行 jni 方法，再把结果传回来。</p>
<h1 id="Themes"><a href="#Themes" class="headerlink" title="Themes"></a>Themes</h1><h2 id="如何为-Material-styled-应用设置主题"><a href="#如何为-Material-styled-应用设置主题" class="headerlink" title="如何为 Material-styled 应用设置主题"></a>如何为 Material-styled 应用设置主题</h2><p>Flutter 已经为我们实现好了 MaterialDesign，并设置好了大部分样式。Android 里使用 AndroidManifest.xml 控制主题样式，而 Flutter 的主题是在顶级 Widget 里声明的。<br>你可以将一个 MaterialApp 对象声明为整个应用的入口。它包含一系列实现 MaterialDesign 所需的组件。继承自 WidgetsApp，并实现了 Material 相关的功能。</p>
<p>不需要 MaterialDesign 的话，直接使用 WidgetsApp 即可。</p>
<p>构建 MaterialApp 时，传入定义好的 ThemeData 即可指定样式：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Sample App&#x27;</span>,</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">        textSelectionColor: Colors.red</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">new</span> SampleAppPage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="Databases-and-local-storage"><a href="#Databases-and-local-storage" class="headerlink" title="Databases and local storage"></a>Databases and local storage</h1><h2 id="如何访问-Shared-Preferences"><a href="#如何访问-Shared-Preferences" class="headerlink" title="如何访问 Shared Preferences ?"></a>如何访问 Shared Preferences ?</h2><p>使用 Shared Preferences plugin  <a href="https://pub.dartlang.org/packages/shared_preferences">Shared_Preferences</a></p>
<p>除了 Android 使用的 SharePreferences，给他还提供 iOS 的 NSUserDefaults。</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:shared_preferences/shared_preferences.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(</span><br><span class="line">    <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      home: <span class="keyword">new</span> Scaffold(</span><br><span class="line">        body: <span class="keyword">new</span> Center(</span><br><span class="line">          child: <span class="keyword">new</span> RaisedButton(</span><br><span class="line">            onPressed: _incrementCounter,</span><br><span class="line">            child: <span class="keyword">new</span> Text(<span class="string">&#x27;Increment Counter&#x27;</span>),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_incrementCounter() <span class="keyword">async</span> &#123;</span><br><span class="line">  SharedPreferences prefs = <span class="keyword">await</span> SharedPreferences.getInstance();</span><br><span class="line">  <span class="built_in">int</span> counter = (prefs.getInt(<span class="string">&#x27;counter&#x27;</span>) ?? <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Pressed <span class="subst">$counter</span> times.&#x27;</span>);</span><br><span class="line">  prefs.setInt(<span class="string">&#x27;counter&#x27;</span>, counter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="如何访问-SQLite"><a href="#如何访问-SQLite" class="headerlink" title="如何访问 SQLite ?"></a>如何访问 SQLite ?</h2><p>使用 SQFlite plugin  <a href="https://pub.dartlang.org/packages/sqflite">SQFlite</a></p>
<h1 id="Notifications"><a href="#Notifications" class="headerlink" title="Notifications"></a>Notifications</h1><h2 id="如何发送-Notifications"><a href="#如何发送-Notifications" class="headerlink" title="如何发送 Notifications"></a>如何发送 Notifications</h2><p>广告时间 ： Firebase_Messaging plugin  <a href="https://github.com/flutter/plugins/tree/master/packages/firebase_messaging">Firebase_Messaging</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://flutter.io/flutter-for-android/#working-with-text&quot;&gt;https://flutter.io/flutter-for-android/#working-with-tex
    
    </summary>
    
      <category term="learn" scheme="https://invoker.me/categories/learn/"/>
    
    
      <category term="android" scheme="https://invoker.me/tags/android/"/>
    
      <category term="flutter" scheme="https://invoker.me/tags/flutter/"/>
    
      <category term="dart" scheme="https://invoker.me/tags/dart/"/>
    
  </entry>
  
  <entry>
    <title>[翻译] Flutter for Android part 2</title>
    <link href="https://invoker.me/flutter-for-android-part-2/"/>
    <id>https://invoker.me/flutter-for-android-part-2/</id>
    <published>2018-03-03T04:02:14.000Z</published>
    <updated>2025-06-29T04:49:36.603Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://flutter.io/flutter-for-android/#async-ui">https://flutter.io/flutter-for-android/#async-ui</a></p>
</blockquote>
<p>[toc]</p>
<h1 id="Async-UI"><a href="#Async-UI" class="headerlink" title="Async UI"></a>Async UI</h1><h2 id="Flutter-中的-runOnUiThread-是啥"><a href="#Flutter-中的-runOnUiThread-是啥" class="headerlink" title="Flutter 中的 runOnUiThread 是啥"></a>Flutter 中的 runOnUiThread 是啥</h2><p>Dart 是单线程模型的，提供 Isolates (一种在其他线程运行 dart 的方式)，Event Loop，异步编程。除了创建 Isolate，你的代码都将运行在主 UI 线程，并由 Event Loop 驱动。</p>
<p>比如你可以在 UI 线程进行网络请求而不阻塞 UI</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">loadData() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">String</span> dataURL = <span class="string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span>;</span><br><span class="line">  http.Response response = <span class="keyword">await</span> http.<span class="keyword">get</span>(dataURL);</span><br><span class="line">  setState(() &#123;</span><br><span class="line">    widgets = JSON.decode(response.body);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 setState  触发 build 方法，更新数据，更新 UI。<br>先面是个 异步加载数据并显示 ListView 的例子：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:http/http.dart&#x27;</span> <span class="keyword">as</span> http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> SampleApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Sample App&#x27;</span>,</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">new</span> SampleAppPage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleAppPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  SampleAppPage(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _SampleAppPageState createState() =&gt; <span class="keyword">new</span> _SampleAppPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_SampleAppPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SampleAppPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">List</span> widgets = [];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line"></span><br><span class="line">    loadData();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">        appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">          title: <span class="keyword">new</span> Text(<span class="string">&quot;Sample App&quot;</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: <span class="keyword">new</span> ListView.builder(</span><br><span class="line">            itemCount: widgets.length,</span><br><span class="line">            itemBuilder: (BuildContext context, <span class="built_in">int</span> position) &#123;</span><br><span class="line">              <span class="keyword">return</span> getRow(position);</span><br><span class="line">            &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget getRow(<span class="built_in">int</span> i) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Padding(</span><br><span class="line">        padding: <span class="keyword">new</span> EdgeInsets.all(<span class="number">10.0</span>),</span><br><span class="line">        child: <span class="keyword">new</span> Text(<span class="string">&quot;Row <span class="subst">$&#123;widgets[i][<span class="string">&quot;title&quot;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  loadData() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">String</span> dataURL = <span class="string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span>;</span><br><span class="line">    http.Response response = <span class="keyword">await</span> http.<span class="keyword">get</span>(dataURL);</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      widgets = JSON.decode(response.body);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="什么等价于-Android-里的-AsyncTask-或是-IntentService"><a href="#什么等价于-Android-里的-AsyncTask-或是-IntentService" class="headerlink" title="什么等价于 Android 里的 AsyncTask 或是 IntentService"></a>什么等价于 Android 里的 AsyncTask 或是 IntentService</h2><p>Android 在访问网络数据时可以创建一个 AsyncTask  在 UI 线程外执行，避免阻塞主线程。AsyncTask 有个线程池管理 thread。</p>
<p>Flutter 是单线程的啊，只有 event loop (比如 Node.js)，用不着操心线程什么乱七八糟的。</p>
<p>想异步执行代码，只要把函数声明成 <code>async</code>  就行，await 等待结果返回。</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">loadData() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">String</span> dataURL = <span class="string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span>;</span><br><span class="line">  http.Response response = <span class="keyword">await</span> http.<span class="keyword">get</span>(dataURL);</span><br><span class="line">  setState(() &#123;</span><br><span class="line">    widgets = JSON.decode(response.body);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这就是常用的网络或是数据库请求了。</p>
<p>Android 继承 AsyncTask 要重写好多方法，我们 Flutter 根本用不着，直接 await  ，剩下的交给 Dart 的 event loop 就行了。</p>
<p>不过当你处理大量数据时 UI 仍有被阻塞的可能。</p>
<p>这种场景，Flutter 有机会用到多核处理器的优势执行耗时操作，或是密集计算型 task。轮到 Isolates 出场了。</p>
<p>Isolates 是单独执行的线程，不和主线程共享数据。在这你不能访问主线程的变量，也不能调用 setState 更新 UI。</p>
<p>看代码，我们将如何将数据返回给主线程：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">loadData() <span class="keyword">async</span> &#123;</span><br><span class="line">    ReceivePort receivePort = <span class="keyword">new</span> ReceivePort();</span><br><span class="line">    <span class="keyword">await</span> Isolate.spawn(dataLoader, receivePort.sendPort);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The &#x27;echo&#x27; isolate sends it&#x27;s SendPort as the first message</span></span><br><span class="line">    SendPort sendPort = <span class="keyword">await</span> receivePort.first;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">List</span> msg = <span class="keyword">await</span> sendReceive(sendPort, <span class="string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span>);</span><br><span class="line"></span><br><span class="line">    setState(() &#123;</span><br><span class="line">      widgets = msg;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the entry point for the isolate</span></span><br><span class="line">  <span class="keyword">static</span> dataLoader(SendPort sendPort) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// Open the ReceivePort for incoming messages.</span></span><br><span class="line">    ReceivePort port = <span class="keyword">new</span> ReceivePort();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Notify any other isolates what port this isolate listens to.</span></span><br><span class="line">    sendPort.send(port.sendPort);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">for</span> (<span class="keyword">var</span> msg <span class="keyword">in</span> port) &#123;</span><br><span class="line">      <span class="built_in">String</span> data = msg[<span class="number">0</span>];</span><br><span class="line">      SendPort replyTo = msg[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">      <span class="built_in">String</span> dataURL = data;</span><br><span class="line">      http.Response response = <span class="keyword">await</span> http.<span class="keyword">get</span>(dataURL);</span><br><span class="line">      <span class="comment">// Lots of JSON to parse</span></span><br><span class="line">      replyTo.send(JSON.decode(response.body));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future sendReceive(SendPort port, msg) &#123;</span><br><span class="line">    ReceivePort response = <span class="keyword">new</span> ReceivePort();</span><br><span class="line">    port.send([msg, response.sendPort]);</span><br><span class="line">    <span class="keyword">return</span> response.first;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p><code>dataLoader</code> 将执行在 Isolate 线程，可以做更多 CPU 密集的操作。</p>
<p>完整示例：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:http/http.dart&#x27;</span> <span class="keyword">as</span> http;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:async&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:isolate&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> SampleApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Sample App&#x27;</span>,</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">new</span> SampleAppPage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleAppPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  SampleAppPage(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _SampleAppPageState createState() =&gt; <span class="keyword">new</span> _SampleAppPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_SampleAppPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SampleAppPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">List</span> widgets = [];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    loadData();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  showLoadingDialog() &#123;</span><br><span class="line">    <span class="keyword">if</span> (widgets.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getBody() &#123;</span><br><span class="line">    <span class="keyword">if</span> (showLoadingDialog()) &#123;</span><br><span class="line">      <span class="keyword">return</span> getProgressDialog();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> getListView();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getProgressDialog() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Center(child: <span class="keyword">new</span> CircularProgressIndicator());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">        appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">          title: <span class="keyword">new</span> Text(<span class="string">&quot;Sample App&quot;</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: getBody());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ListView getListView() =&gt; <span class="keyword">new</span> ListView.builder(</span><br><span class="line">      itemCount: widgets.length,</span><br><span class="line">      itemBuilder: (BuildContext context, <span class="built_in">int</span> position) &#123;</span><br><span class="line">        <span class="keyword">return</span> getRow(position);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">  Widget getRow(<span class="built_in">int</span> i) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Padding(padding: <span class="keyword">new</span> EdgeInsets.all(<span class="number">10.0</span>), child: <span class="keyword">new</span> Text(<span class="string">&quot;Row <span class="subst">$&#123;widgets[i][<span class="string">&quot;title&quot;</span>]&#125;</span>&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  loadData() <span class="keyword">async</span> &#123;</span><br><span class="line">    ReceivePort receivePort = <span class="keyword">new</span> ReceivePort();</span><br><span class="line">    <span class="keyword">await</span> Isolate.spawn(dataLoader, receivePort.sendPort);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The &#x27;echo&#x27; isolate sends it&#x27;s SendPort as the first message</span></span><br><span class="line">    SendPort sendPort = <span class="keyword">await</span> receivePort.first;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">List</span> msg = <span class="keyword">await</span> sendReceive(sendPort, <span class="string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span>);</span><br><span class="line"></span><br><span class="line">    setState(() &#123;</span><br><span class="line">      widgets = msg;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the entry point for the isolate</span></span><br><span class="line">  <span class="keyword">static</span> dataLoader(SendPort sendPort) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// Open the ReceivePort for incoming messages.</span></span><br><span class="line">    ReceivePort port = <span class="keyword">new</span> ReceivePort();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Notify any other isolates what port this isolate listens to.</span></span><br><span class="line">    sendPort.send(port.sendPort);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">for</span> (<span class="keyword">var</span> msg <span class="keyword">in</span> port) &#123;</span><br><span class="line">      <span class="built_in">String</span> data = msg[<span class="number">0</span>];</span><br><span class="line">      SendPort replyTo = msg[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">      <span class="built_in">String</span> dataURL = data;</span><br><span class="line">      http.Response response = <span class="keyword">await</span> http.<span class="keyword">get</span>(dataURL);</span><br><span class="line">      <span class="comment">// Lots of JSON to parse</span></span><br><span class="line">      replyTo.send(JSON.decode(response.body));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future sendReceive(SendPort port, msg) &#123;</span><br><span class="line">    ReceivePort response = <span class="keyword">new</span> ReceivePort();</span><br><span class="line">    port.send([msg, response.sendPort]);</span><br><span class="line">    <span class="keyword">return</span> response.first;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Flutter-可以用啥替代-OkHttp"><a href="#Flutter-可以用啥替代-OkHttp" class="headerlink" title="Flutter 可以用啥替代 OkHttp"></a>Flutter 可以用啥替代 OkHttp</h2><p>普通点，直接用 http package 就行。</p>
<p>尽管 http  包和 OkHttp 差了点 feature 蛤，但他也抽象了很多常用的方法，让网络请求更简单。</p>
<p><a href="https://pub.dartlang.org/packages/http">https://pub.dartlang.org/packages/http</a></p>
<p>把依赖加到 pubspec.yaml 就能用了</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  ...</span><br><span class="line">  http: <span class="string">&#x27;&gt;=0.11.3+12&#x27;</span></span><br></pre></td></tr></table></figure>
<p>跑个网络请求吧：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:http/http.dart&#x27;</span> <span class="keyword">as</span> http;</span><br><span class="line">[...]</span><br><span class="line">  loadData() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">String</span> dataURL = <span class="string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span>;</span><br><span class="line">    http.Response response = <span class="keyword">await</span> http.<span class="keyword">get</span>(dataURL);</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      widgets = JSON.decode(response.body);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>拿到数据咱们直接就可以用 setState 更新 UI</p>
<h2 id="task-执行时如何显示进度条"><a href="#task-执行时如何显示进度条" class="headerlink" title="task 执行时如何显示进度条"></a>task 执行时如何显示进度条</h2><p>一般执行耗时操作都会显示一个进度条。</p>
<p>Flutter 可以渲染一个 Progress Indicator widget。你可以在执行耗时操作前通过代码控制何时渲染一个 Progress Indicator。</p>
<p>下边的例子，把 build function 分成三部分。<code>if showLoadingDialog == true</code> (当 widgets.length == 0)就渲染 ProgressIndicator，否则渲染 ListView。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:http/http.dart&#x27;</span> <span class="keyword">as</span> http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> SampleApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Sample App&#x27;</span>,</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">new</span> SampleAppPage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleAppPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  SampleAppPage(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _SampleAppPageState createState() =&gt; <span class="keyword">new</span> _SampleAppPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_SampleAppPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SampleAppPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">List</span> widgets = [];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    loadData();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  showLoadingDialog() &#123;</span><br><span class="line">    <span class="keyword">if</span> (widgets.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getBody() &#123;</span><br><span class="line">    <span class="keyword">if</span> (showLoadingDialog()) &#123;</span><br><span class="line">      <span class="keyword">return</span> getProgressDialog();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> getListView();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getProgressDialog() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Center(child: <span class="keyword">new</span> CircularProgressIndicator());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">        appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">          title: <span class="keyword">new</span> Text(<span class="string">&quot;Sample App&quot;</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: getBody());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ListView getListView() =&gt; <span class="keyword">new</span> ListView.builder(</span><br><span class="line">      itemCount: widgets.length,</span><br><span class="line">      itemBuilder: (BuildContext context, <span class="built_in">int</span> position) &#123;</span><br><span class="line">        <span class="keyword">return</span> getRow(position);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">  Widget getRow(<span class="built_in">int</span> i) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Padding(padding: <span class="keyword">new</span> EdgeInsets.all(<span class="number">10.0</span>), child: <span class="keyword">new</span> Text(<span class="string">&quot;Row <span class="subst">$&#123;widgets[i][<span class="string">&quot;title&quot;</span>]&#125;</span>&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  loadData() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">String</span> dataURL = <span class="string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span>;</span><br><span class="line">    http.Response response = <span class="keyword">await</span> http.<span class="keyword">get</span>(dataURL);</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      widgets = JSON.decode(response.body);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="Project-Structure-amp-Resources"><a href="#Project-Structure-amp-Resources" class="headerlink" title="Project Structure &amp; Resources"></a>Project Structure &amp; Resources</h1><h2 id="如何存放多分辨率资源分拣-HDPI-XXHDPI"><a href="#如何存放多分辨率资源分拣-HDPI-XXHDPI" class="headerlink" title="如何存放多分辨率资源分拣 HDPI/XXHDPI"></a>如何存放多分辨率资源分拣 HDPI/XXHDPI</h2><p>Flutter 资源文件和 iOS 规则相似。1x, 2x, and 3x.</p>
<p>如下存放文件即可：</p>
<ul>
<li>…/my_icon.png</li>
<li>…/2.0x/my_icon.png</li>
<li>…/3.0x/my_icon.png</li>
</ul>
<p>并在 <code>pubspec.yaml</code> 文件中声明：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">```yaml</span><br><span class="line">assets:</span><br><span class="line"> - images/a_dot_burr.jpeg</span><br><span class="line"> - images/a_dot_ham.jpeg</span><br></pre></td></tr></table></figure></p>
<p>最后就可以使用了：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AssetImage(<span class="string">&quot;images/a_dot_burr.jpeg&quot;</span>);</span><br></pre></td></tr></table></figure></p>
<h2 id="如何保存字符串并处理本地化"><a href="#如何保存字符串并处理本地化" class="headerlink" title="如何保存字符串并处理本地化"></a>如何保存字符串并处理本地化</h2><p>当前的最佳实践是创建一个 String 类。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Strings</span></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">String</span> welcomeMessage = <span class="string">&quot;Welcome To Flutter&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>并使用：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Text(Strings.welcomeMessage)</span><br></pre></td></tr></table></figure><br>Flutter 对 Android 提供基本的访问，不过正在开发进程中。<br>我们推荐使用  <a href="https://pub.dartlang.org/packages/intl">intl package</a> 开发国际化相关内容。</p>
<h2 id="什么等价于-gradle-配置文件，管理依赖"><a href="#什么等价于-gradle-配置文件，管理依赖" class="headerlink" title="什么等价于 gradle 配置文件，管理依赖"></a>什么等价于 gradle 配置文件，管理依赖</h2><p>Flutter 项目的 Android 路径下有 gradle 的配置文件，可以添加 Android 平台的依赖。Flutter 的依赖声明在 <code>pubspec.yaml</code> 文件。<br>可以到  <a href="https://pub.dartlang.org/flutter/packages/">Pub</a> 这里找到更多 flutter 的 package。</p>
<h1 id="Activities-and-Fragments"><a href="#Activities-and-Fragments" class="headerlink" title="Activities and Fragments"></a>Activities and Fragments</h1><h2 id="什么等价于-activities-and-fragments"><a href="#什么等价于-activities-and-fragments" class="headerlink" title="什么等价于 activities and fragments"></a>什么等价于 activities and fragments</h2><p>在 Flutter 里这两个概念都由 widget 承载。</p>
<h2 id="如何监听-Android-生命周期"><a href="#如何监听-Android-生命周期" class="headerlink" title="如何监听 Android 生命周期"></a>如何监听 Android 生命周期</h2><p>可以 hook 一个 WidgetsBinding observer，监听 didChangeAppLifecycleState 事件。</p>
<p>生命周期相关的事件有：</p>
<ul>
<li><strong>resumed</strong> - 应用处于可见状态，并可以响应用户输入。对应 Android 的 onResume </li>
<li><strong>inactive</strong> - 应用处于非活跃状态，不相应用户输入。 只用于 iOS 。</li>
<li><strong>paused</strong> - 可见，不相应输入，运行在后台。 对应 Android 的  onPause</li>
<li><strong>suspending</strong> - 应用暂时被挂起。 不用于 iOS</li>
</ul>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/widgets.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LifecycleWatcher</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _LifecycleWatcherState createState() =&gt; <span class="keyword">new</span> _LifecycleWatcherState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_LifecycleWatcherState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">LifecycleWatcher</span>&gt; <span class="title">with</span> <span class="title">WidgetsBindingObserver</span> </span>&#123;</span><br><span class="line">  AppLifecycleState _lastLifecyleState;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    WidgetsBinding.instance.addObserver(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    WidgetsBinding.instance.removeObserver(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> didChangeAppLifecycleState(AppLifecycleState state) &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _lastLifecyleState = state;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_lastLifecyleState == <span class="keyword">null</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Text(<span class="string">&#x27;This widget has not observed any lifecycle changes.&#x27;</span>, textDirection: TextDirection.ltr);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Text(<span class="string">&#x27;The most recent lifecycle state this widget observed was: <span class="subst">$_lastLifecyleState</span>.&#x27;</span>,</span><br><span class="line">        textDirection: TextDirection.ltr);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> Center(child: <span class="keyword">new</span> LifecycleWatcher()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="Layouts"><a href="#Layouts" class="headerlink" title="Layouts"></a>Layouts</h1><h2 id="LinearLayout-有没有"><a href="#LinearLayout-有没有" class="headerlink" title="LinearLayout 有没有"></a>LinearLayout 有没有</h2><p>Android 使用 LinearLayout 垂直或水平布局 widget，Flutter 里使用 Row widget or Column widget 。</p>
<p>观察下面两段代码，除了 “Row” 和 “Column” 这两个 widget 不同，剩下的都一样。 利用这一特性可以对同一子节点进行额外的变化从而开发出多样的布局。</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Row(</span><br><span class="line">    mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">      <span class="keyword">new</span> Text(<span class="string">&#x27;Row One&#x27;</span>),</span><br><span class="line">      <span class="keyword">new</span> Text(<span class="string">&#x27;Row Two&#x27;</span>),</span><br><span class="line">      <span class="keyword">new</span> Text(<span class="string">&#x27;Row Three&#x27;</span>),</span><br><span class="line">      <span class="keyword">new</span> Text(<span class="string">&#x27;Row Four&#x27;</span>),</span><br><span class="line">    ],</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Column(</span><br><span class="line">    mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">      <span class="keyword">new</span> Text(<span class="string">&#x27;Column One&#x27;</span>),</span><br><span class="line">      <span class="keyword">new</span> Text(<span class="string">&#x27;Column Two&#x27;</span>),</span><br><span class="line">      <span class="keyword">new</span> Text(<span class="string">&#x27;Column Three&#x27;</span>),</span><br><span class="line">      <span class="keyword">new</span> Text(<span class="string">&#x27;Column Four&#x27;</span>),</span><br><span class="line">    ],</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="RelativeLayout-怎么说"><a href="#RelativeLayout-怎么说" class="headerlink" title="RelativeLayout 怎么说"></a>RelativeLayout 怎么说</h2><p>相对布局，Flutter 可以有很多方式完成同样的效果。<br>你可以将 Column, Row, and Stack widgets 这些组件组合，也可以在 widget 的构造函数处声明 child widget 相对于其 parent widget 如何布局。</p>
<p> 可以看看这个 StackOverflow 里的问题，不错的例子  <a href="https://stackoverflow.com/questions/44396075/equivalent-of-relativelayout-in-flutter">https://stackoverflow.com/questions/44396075/equivalent-of-relativelayout-in -flutter</a></p>
<h2 id="ScrollView-怎么写"><a href="#ScrollView-怎么写" class="headerlink" title="ScrollView 怎么写"></a>ScrollView 怎么写</h2><p>Android 开发中我们用 ScrollView 承载一个屏幕装不下的内容。<br>Flutter 里最简单的就是用 ListView 去做。从 Android 开发的角度看，有些杀鸡焉用牛刀了，不过 Flutter 的 ListView 就是用于这个场景的，它同时对应 Android 里的 ScrollView 和 ListView 这两个控件。 </p>
<h1 id="手势识别和触摸事件响应"><a href="#手势识别和触摸事件响应" class="headerlink" title="手势识别和触摸事件响应"></a>手势识别和触摸事件响应</h1><h2 id="怎么给-Flutter-里的-widget-添加点击事件"><a href="#怎么给-Flutter-里的-widget-添加点击事件" class="headerlink" title="怎么给 Flutter 里的 widget 添加点击事件"></a>怎么给 Flutter 里的 widget 添加点击事件</h2><p>Android 使用 view 的 setOnClickListener  添加点击事件<br>Flutter 有两种方式：</p>
<ol>
<li>widget 提供事件响应，我们只需要传入处理函数即可。比如 <code>RaisedButton</code> 提供 onPressed 属性。<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@overrid</span>	e</span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> RaisedButton(</span><br><span class="line">      onPressed: () &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;click&quot;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      child: <span class="keyword">new</span> Text(<span class="string">&quot;Button&quot;</span>));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
<li>当widget 不提供事件时，你可以用 GestureDetector 把它封装一下，再向 onTap 参数传入处理函数即可： <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">     <span class="meta">@override</span></span><br><span class="line">     Widget build(BuildContext context) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">           body: <span class="keyword">new</span> Center(</span><br><span class="line">         child: <span class="keyword">new</span> GestureDetector(</span><br><span class="line">           child: <span class="keyword">new</span> FlutterLogo(</span><br><span class="line">             size: <span class="number">200.0</span>,</span><br><span class="line">           ),</span><br><span class="line">           onTap: () &#123;</span><br><span class="line">             <span class="built_in">print</span>(<span class="string">&quot;tap&quot;</span>);</span><br><span class="line">           &#125;,</span><br><span class="line">         ),</span><br><span class="line">       ));</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="除了点击之外事件呢"><a href="#除了点击之外事件呢" class="headerlink" title="除了点击之外事件呢?"></a>除了点击之外事件呢?</h2><p>GestureDetector 为我们提供了丰富的事件类型：</p>
<ul>
<li><p>Tap</p>
<ul>
<li><code>onTapDown</code>  类似 MotionEvent.ACTION_DOWN</li>
<li><code>onTapUp</code>  MotionEvent.ACTION_UP</li>
<li><code>onTap</code>  onClick</li>
<li><code>onTapCancel</code>  MotionEvent.ACTION_CANCEL</li>
</ul>
</li>
<li><p>Double tap</p>
<ul>
<li><code>onDoubleTap</code>  The user has tapped the screen at the same location twice in quick succession.</li>
</ul>
</li>
<li><p>Long press</p>
<ul>
<li><code>onLongPress</code>  A pointer has remained in contact with the screen at the same location for a long period of time.</li>
</ul>
</li>
<li><p>Vertical drag</p>
<ul>
<li><code>onVerticalDragStart</code>  A pointer has contacted the screen and might begin to move vertically.</li>
<li><code>onVerticalDragUpdate</code>  A pointer that is in contact with the screen and moving vertically has moved in the vertical direction.</li>
<li><code>onVerticalDragEnd</code>  A pointer that was previously in contact with the screen and moving vertically is no longer in contact with the screen and was moving at a specific velocity when it stopped contacting the screen.</li>
</ul>
</li>
<li><p>Horizontal drag</p>
<ul>
<li><code>onHorizontalDragStart</code>  A pointer has contacted the screen and might begin to move horizontally.</li>
<li><code>onHorizontalDragUpdate</code>  A pointer that is in contact with the screen and moving horizontally has moved in the horizontal direction.</li>
<li><code>onHorizontalDragEnd</code>  A pointer that was previously in contact with the screen and moving horizontally is no longer in contact with the screen and was moving at a specific velocity when it stopped contacting the screen.</li>
</ul>
</li>
</ul>
<p>一个双击旋转的例子：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">AnimationController controller;</span><br><span class="line">CurvedAnimation curve;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> initState() &#123;</span><br><span class="line">  controller = <span class="keyword">new</span> AnimationController(duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">2000</span>), vsync: <span class="keyword">this</span>);</span><br><span class="line">  curve = <span class="keyword">new</span> CurvedAnimation(parent: controller, curve: Curves.easeIn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">        body: <span class="keyword">new</span> Center(</span><br><span class="line">          child: <span class="keyword">new</span> GestureDetector(</span><br><span class="line">            child: <span class="keyword">new</span> RotationTransition(</span><br><span class="line">                turns: curve,</span><br><span class="line">                child: <span class="keyword">new</span> FlutterLogo(</span><br><span class="line">                  size: <span class="number">200.0</span>,</span><br><span class="line">                )),</span><br><span class="line">            onDoubleTap: () &#123;</span><br><span class="line">              <span class="keyword">if</span> (controller.isCompleted) &#123;</span><br><span class="line">                controller.reverse();</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                controller.forward();</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        ),</span><br><span class="line">    ));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Listviews-amp-Adapters"><a href="#Listviews-amp-Adapters" class="headerlink" title="Listviews &amp; Adapters"></a>Listviews &amp; Adapters</h1><h2 id="Flutter-用啥替代-ListView"><a href="#Flutter-用啥替代-ListView" class="headerlink" title="Flutter 用啥替代 ListView"></a>Flutter 用啥替代 ListView</h2><p>对的，用 ListView…<br>Android 里我们创建 adapter 控制如何渲染每个 child，同时我们还要负责复用 view，避免浪费大量的内存和附带的卡顿问题。</p>
<p>由于 Flutter 的 widget 是 immutable 的，你只负责生成 ListView ， Flutter 来确视图的顺畅平滑。</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> SampleApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Sample App&#x27;</span>,</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">new</span> SampleAppPage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleAppPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  SampleAppPage(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _SampleAppPageState createState() =&gt; <span class="keyword">new</span> _SampleAppPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_SampleAppPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SampleAppPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">&quot;Sample App&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">new</span> ListView(children: _getListData()),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _getListData() &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;Widget&gt; widgets = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">      widgets.add(<span class="keyword">new</span> Padding(padding: <span class="keyword">new</span> EdgeInsets.all(<span class="number">10.0</span>), child: <span class="keyword">new</span> Text(<span class="string">&quot;Row <span class="subst">$i</span>&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> widgets;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="如何给-list-的-item-设置事件"><a href="#如何给-list-的-item-设置事件" class="headerlink" title="如何给 list 的 item 设置事件"></a>如何给 list 的 item 设置事件</h2><p>Android 提供 <code>onItemClickListener</code>。Flutter 里可以直接单独为每一个 child 设置 handler。</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> SampleApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Sample App&#x27;</span>,</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">new</span> SampleAppPage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleAppPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  SampleAppPage(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _SampleAppPageState createState() =&gt; <span class="keyword">new</span> _SampleAppPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_SampleAppPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SampleAppPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">&quot;Sample App&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">new</span> ListView(children: _getListData()),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _getListData() &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;Widget&gt; widgets = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">      widgets.add(<span class="keyword">new</span> GestureDetector(</span><br><span class="line">        child: <span class="keyword">new</span> Padding(</span><br><span class="line">            padding: <span class="keyword">new</span> EdgeInsets.all(<span class="number">10.0</span>),</span><br><span class="line">            child: <span class="keyword">new</span> Text(<span class="string">&quot;Row <span class="subst">$i</span>&quot;</span>)),</span><br><span class="line">        onTap: () &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;row tapped&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">      ));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> widgets;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="如何动态更新-ListView"><a href="#如何动态更新-ListView" class="headerlink" title="如何动态更新 ListView"></a>如何动态更新 ListView</h2><p>Android 使用 <code>notifyDataSetChanged</code> 通知数据变化。Flutter 通过 <code>setState()</code> 方法设置数据后，视图并没有随之变化。</p>
<p>当 <code>setState()</code> 调用后，Flutter 会遍历所有 widget 检查是否发生变动。到你的 ListView 时，会执行 <code>==</code> 操作，发现前后两个 ListView 是一样的，所以不会有视图更新。</p>
<p>想让视图更新你得在 <code>setState()</code> 的时候创建一个新的 List，并且自己手动吧老数据拷过来。例子：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> SampleApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Sample App&#x27;</span>,</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">new</span> SampleAppPage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleAppPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  SampleAppPage(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _SampleAppPageState createState() =&gt; <span class="keyword">new</span> _SampleAppPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_SampleAppPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SampleAppPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">List</span> widgets = [];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">      widgets.add(getRow(i));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">&quot;Sample App&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">new</span> ListView(children: widgets),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget getRow(<span class="built_in">int</span> i) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> GestureDetector(</span><br><span class="line">      child: <span class="keyword">new</span> Padding(</span><br><span class="line">          padding: <span class="keyword">new</span> EdgeInsets.all(<span class="number">10.0</span>),</span><br><span class="line">          child: <span class="keyword">new</span> Text(<span class="string">&quot;Row <span class="subst">$i</span>&quot;</span>)),</span><br><span class="line">      onTap: () &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          widgets = <span class="keyword">new</span> <span class="built_in">List</span>.from(widgets);</span><br><span class="line">          widgets.add(getRow(widgets.length + <span class="number">1</span>));</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;row <span class="subst">$i</span>&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不过，推荐还是使用 ListView.Builder，更高效，实用。当你处理大量数据或是一个动态 List 时很有用。 等同于 Andorid 里的 RecyclerView。</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> SampleApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Sample App&#x27;</span>,</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">new</span> SampleAppPage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleAppPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  SampleAppPage(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _SampleAppPageState createState() =&gt; <span class="keyword">new</span> _SampleAppPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_SampleAppPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SampleAppPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">List</span> widgets = [];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">      widgets.add(getRow(i));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">        appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">          title: <span class="keyword">new</span> Text(<span class="string">&quot;Sample App&quot;</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: <span class="keyword">new</span> ListView.builder(</span><br><span class="line">            itemCount: widgets.length,</span><br><span class="line">            itemBuilder: (BuildContext context, <span class="built_in">int</span> position) &#123;</span><br><span class="line">              <span class="keyword">return</span> getRow(position);</span><br><span class="line">            &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget getRow(<span class="built_in">int</span> i) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> GestureDetector(</span><br><span class="line">      child: <span class="keyword">new</span> Padding(</span><br><span class="line">          padding: <span class="keyword">new</span> EdgeInsets.all(<span class="number">10.0</span>),</span><br><span class="line">          child: <span class="keyword">new</span> Text(<span class="string">&quot;Row <span class="subst">$i</span>&quot;</span>)),</span><br><span class="line">      onTap: () &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          widgets.add(getRow(widgets.length + <span class="number">1</span>));</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;row <span class="subst">$i</span>&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们用 new ListView.builder 代替了直接创建新的 ListView。build 接受两个参数，初始长度和一个 ItemBuilder 函数。<br>功能上 ItemBuilder 和 Android 中 Adapter 的 getView() 一样，返回对应位置 child 样式。<br>并且，最重要的是我们没有在 onTap 函数里重新创建 List，只调用了一个 add 方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://flutter.io/flutter-for-android/#async-ui&quot;&gt;https://flutter.io/flutter-for-android/#async-ui&lt;/a&gt;&lt;/p&gt;
&lt;/blockq
    
    </summary>
    
      <category term="learn" scheme="https://invoker.me/categories/learn/"/>
    
    
      <category term="android" scheme="https://invoker.me/tags/android/"/>
    
      <category term="flutter" scheme="https://invoker.me/tags/flutter/"/>
    
      <category term="dart" scheme="https://invoker.me/tags/dart/"/>
    
  </entry>
  
  <entry>
    <title>[翻译] Flutter for Android part 1</title>
    <link href="https://invoker.me/flutter-for-android-part1/"/>
    <id>https://invoker.me/flutter-for-android-part1/</id>
    <published>2018-03-01T11:53:08.000Z</published>
    <updated>2025-06-29T04:49:36.604Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://flutter.io/flutter-for-android/">https://flutter.io/flutter-for-android/</a></p>
</blockquote>
<p>[toc]</p>
<h1 id="View"><a href="#View" class="headerlink" title="View"></a>View</h1><h2 id="在-Flutter-里什么等价于-View"><a href="#在-Flutter-里什么等价于-View" class="headerlink" title="在 Flutter 里什么等价于 View"></a>在 Flutter 里什么等价于 View</h2><p>View 是一切 Android 控件的基石。无论是 Button， Toolbar 或者 Input 都是 View。Flutter 中的 View 是 Widget，但有几点不同。首先，widget 的生命周期只有一帧，flutter 框架会为每一帧都创建一个 widget 实例树。相比之下， View 绘制之后只有 invalidate 方法被调用才会再次绘制。</p>
<h2 id="如何更新-Widgets"><a href="#如何更新-Widgets" class="headerlink" title="如何更新 Widgets"></a>如何更新 Widgets</h2><p>Android 中，我们直接修改 view 即可更新。但是 Flutter 的 Widget 是不可变的，不能直接修改，只能修改 Widget 的状态来更新。<br>这也是 Stateful 和 Stateless Widget 这两个概念的由来。StatelessWidget 就是一个没有状态信息的 widget 。</p>
<p>当你所需的用户界面不依赖对象里的任何配置信息时，可以选择使用 StatelessWidget。</p>
<p>比如 Android 里的这样一个场景，一个只显示 logo 的 ImageView ，运行时 logo 也不变这种的。</p>
<p>再比如，要是你想根据一个 http 请求的返回结果动态的对 UI 进行修改，你就得用 StatefulWidget 了，然后告诉 Flutter 框架状态更新了，他就会自己处理后面的事了。</p>
<p>需要注意，本质上 Stateless 和 Stateful 还是会在每一帧重建的。不同的是 StatefulWidget 有一个 State 对象保存状态数据并在新的一帧中恢复。</p>
<p>如果你对此还有疑惑，请记住：如果 widget 可以改变(比如响应用户操作) 就是 stateful 的。child widget 是 Stateful 并不意味他的 parent widget 就是 Stateful 的，一切都要看当前 widget 是否响应变化。</p>
<p>看看具体代码，Text widget 一个普通的 StatelessWidget 。看源码就知道 Text Widget 是 StatelessWidget 的子类。</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Text(</span><br><span class="line">  <span class="string">&#x27;I like Flutter!&#x27;</span>,</span><br><span class="line">  style: <span class="keyword">new</span> TextStyle(fontWeight: FontWeight.bold),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>可以看到 Text 并没有相关的状态信息，除了构造函数传入的参数就啥都没有了。</p>
<p>那你想了啊，我要是想点个按钮让那段字变一下怎么整？</p>
<p>用 StatelessWidget 包一下 Text 就行啦：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> SampleApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Sample App&#x27;</span>,</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">new</span> SampleAppPage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleAppPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  SampleAppPage(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _SampleAppPageState createState() =&gt; <span class="keyword">new</span> _SampleAppPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_SampleAppPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SampleAppPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// Default placeholder text</span></span><br><span class="line">  <span class="built_in">String</span> textToShow = <span class="string">&quot;I Like Flutter&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _updateText() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      <span class="comment">// update the text</span></span><br><span class="line">      textToShow = <span class="string">&quot;Flutter is Awesome!&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">&quot;Sample App&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">new</span> Center(child: <span class="keyword">new</span> Text(textToShow)),</span><br><span class="line">      floatingActionButton: <span class="keyword">new</span> FloatingActionButton(</span><br><span class="line">        onPressed: _updateText,</span><br><span class="line">        tooltip: <span class="string">&#x27;Update Text&#x27;</span>,</span><br><span class="line">        child: <span class="keyword">new</span> Icon(Icons.update),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="怎么写布局？还用-xml-嘛？"><a href="#怎么写布局？还用-xml-嘛？" class="headerlink" title="怎么写布局？还用 xml 嘛？"></a>怎么写布局？还用 xml 嘛？</h2><p>没有 xml，我们直接写 widget tree。</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">    appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">      title: <span class="keyword">new</span> Text(<span class="string">&quot;Sample App&quot;</span>),</span><br><span class="line">    ),</span><br><span class="line">    body: <span class="keyword">new</span> Center(</span><br><span class="line">      child: <span class="keyword">new</span> MaterialButton(</span><br><span class="line">        onPressed: () &#123;&#125;,</span><br><span class="line">        child: <span class="keyword">new</span> Text(<span class="string">&#x27;Hello&#x27;</span>),</span><br><span class="line">        padding: <span class="keyword">new</span> EdgeInsets.only(left: <span class="number">10.0</span>, right: <span class="number">10.0</span>),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You can view all the layouts that Flutter has to offer here: <a href="https://flutter.io/widgets/layout/">https://flutter.io/widgets/layout/</a></p>
<h2 id="如何对-layout-组件进行增删"><a href="#如何对-layout-组件进行增删" class="headerlink" title="如何对 layout 组件进行增删"></a>如何对 layout 组件进行增删</h2><p>Android 里用 parent 的<code>addChild</code> 或 <code>removeChild</code>方法对child 进行增删。但是 Flutter 的 widget 是不可变的，这些方法都没有，创建 widget 树时你可以用一个函数返回 widget，再通过传入的参数判断怎么显示 widget。</p>
<p>栗子：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> SampleApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Sample App&#x27;</span>,</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">new</span> SampleAppPage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleAppPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  SampleAppPage(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _SampleAppPageState createState() =&gt; <span class="keyword">new</span> _SampleAppPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_SampleAppPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SampleAppPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// Default value for toggle</span></span><br><span class="line">  <span class="built_in">bool</span> toggle = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">void</span> _toggle() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      toggle = !toggle;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _getToggleChild() &#123;</span><br><span class="line">    <span class="keyword">if</span> (toggle) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Text(<span class="string">&#x27;Toggle One&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> MaterialButton(onPressed: () &#123;&#125;, child: <span class="keyword">new</span> Text(<span class="string">&#x27;Toggle Two&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">&quot;Sample App&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">new</span> Center(</span><br><span class="line">        child: _getToggleChild(),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: <span class="keyword">new</span> FloatingActionButton(</span><br><span class="line">        onPressed: _toggle,</span><br><span class="line">        tooltip: <span class="string">&#x27;Update Text&#x27;</span>,</span><br><span class="line">        child: <span class="keyword">new</span> Icon(Icons.update),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h2 id="怎么用-widget-写动画啊，像-View-animate-那样吗"><a href="#怎么用-widget-写动画啊，像-View-animate-那样吗" class="headerlink" title="怎么用 widget 写动画啊，像 View.animate() 那样吗"></a>怎么用 widget 写动画啊，像 View.animate() 那样吗</h2><p>Flutter 提供了 animation library 实现动画。</p>
<p>Andorid 中，我们通过 xml 或是直接调用 View 的 <code>animate()</code> 方法创建动画，而 Flutter 是将 widget 包装到一个 Animation 之中。</p>
<p>和 Android 一样， Flutter 也提供 AnimationController 和一个Interpolator (继承自 Animation 类)，比如 CurvedAnimation。使用时将 controller 和 Animation 传入 AnimationWidget ，之后调用 controller 启动动画。</p>
<p>一个 fade 动画：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> FadeAppTest());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FadeAppTest</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Fade Demo&#x27;</span>,</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">new</span> MyFadeTest(title: <span class="string">&#x27;Fade Demo&#x27;</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFadeTest</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  MyFadeTest(&#123;Key key, <span class="keyword">this</span>.title&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyFadeTest createState() =&gt; <span class="keyword">new</span> _MyFadeTest();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyFadeTest</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyFadeTest</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  AnimationController controller;</span><br><span class="line">  CurvedAnimation curve;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    controller = <span class="keyword">new</span> AnimationController(duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">2000</span>), vsync: <span class="keyword">this</span>);</span><br><span class="line">    curve = <span class="keyword">new</span> CurvedAnimation(parent: controller, curve: Curves.easeIn);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(widget.title),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">new</span> Center(</span><br><span class="line">          child: <span class="keyword">new</span> Container(</span><br><span class="line">              child: <span class="keyword">new</span> FadeTransition(</span><br><span class="line">                  opacity: curve,</span><br><span class="line">                  child: <span class="keyword">new</span> FlutterLogo(</span><br><span class="line">                    size: <span class="number">100.0</span>,</span><br><span class="line">                  )))),</span><br><span class="line">      floatingActionButton: <span class="keyword">new</span> FloatingActionButton(</span><br><span class="line">        tooltip: <span class="string">&#x27;Fade&#x27;</span>,</span><br><span class="line">        child: <span class="keyword">new</span> Icon(Icons.brush),</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          controller.forward();</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>See <a href="https://flutter.io/widgets/animation/">https://flutter.io/widgets/animation/</a> and <a href="https://flutter.io/tutorials/animation">https://flutter.io/tutorials/animation</a> for more specific details.</p>
<h2 id="如何使用-Canvas-进行-draw-paint"><a href="#如何使用-Canvas-进行-draw-paint" class="headerlink" title="如何使用 Canvas 进行 draw/paint"></a>如何使用 Canvas 进行 draw/paint</h2><p>Android 中，使用 Canvas 即可绘制自定义图形。<br>Flutter 提供两个类 CustomPaint 和 CustomPainter 帮助你进行绘制，</p>
<p>来自 StackOverFlow 的热门问题，实现一个画板：<br><a href="https://stackoverflow.com/questions/46241071/create-signature-area-for-mobile-app-in-dart-flutter">https://stackoverflow.com/questions/46241071/create-signature-area-for-mobile-app-in-dart-flutter</a></p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SignaturePainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  SignaturePainter(<span class="keyword">this</span>.points);</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Offset&gt; points;</span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">    <span class="keyword">var</span> paint = <span class="keyword">new</span> Paint()</span><br><span class="line">      ..color = Colors.black</span><br><span class="line">      ..strokeCap = StrokeCap.round</span><br><span class="line">      ..strokeWidth = <span class="number">5.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; points.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (points[i] != <span class="keyword">null</span> &amp;&amp; points[i + <span class="number">1</span>] != <span class="keyword">null</span>)</span><br><span class="line">        canvas.drawLine(points[i], points[i + <span class="number">1</span>], paint);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(SignaturePainter other) =&gt; other.points != points;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Signature</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  SignatureState createState() =&gt; <span class="keyword">new</span> SignatureState();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SignatureState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Signature</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;Offset&gt; _points = &lt;Offset&gt;[];</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> GestureDetector(</span><br><span class="line">      onPanUpdate: (DragUpdateDetails details) &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          RenderBox referenceBox = context.findRenderObject();</span><br><span class="line">          Offset localPosition =</span><br><span class="line">          referenceBox.globalToLocal(details.globalPosition);</span><br><span class="line">          _points = <span class="keyword">new</span> <span class="built_in">List</span>.from(_points)..add(localPosition);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      onPanEnd: (DragEndDetails details) =&gt; _points.add(<span class="keyword">null</span>),</span><br><span class="line">      child: <span class="keyword">new</span> CustomPaint(painter: <span class="keyword">new</span> SignaturePainter(_points)),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  Widget build(BuildContext context) =&gt; <span class="keyword">new</span> Scaffold(body: <span class="keyword">new</span> Signature());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(<span class="keyword">new</span> MaterialApp(home: <span class="keyword">new</span> DemoApp()));</span><br></pre></td></tr></table></figure>
<h2 id="如何自定义-Widgets"><a href="#如何自定义-Widgets" class="headerlink" title="如何自定义 Widgets"></a>如何自定义 Widgets</h2><p>安卓怎么自定义 View 大家都很熟了，不多说。<br>Flutter  里自定义一个 widget 往往不是直接继承，而是通过组合小的 widget。</p>
<p>我们来实现一个 CustomButton ，直接在构造函数传入一个 label。这里将其与一个 RaisedButton 组合，而不是继承一个 RaisedButton，再重写实现新的方法。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomButton</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> label;</span><br><span class="line">  CustomButton(<span class="keyword">this</span>.label);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RaisedButton(onPressed: () &#123;&#125;, child: <span class="keyword">new</span> Text(label));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>使用<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Center(</span><br><span class="line">      child: <span class="keyword">new</span> CustomButton(<span class="string">&quot;Hello&quot;</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="Intents"><a href="#Intents" class="headerlink" title="Intents"></a>Intents</h1><h2 id="Flutter-里什么等价于-Intent"><a href="#Flutter-里什么等价于-Intent" class="headerlink" title="Flutter 里什么等价于  Intent"></a>Flutter 里什么等价于  Intent</h2><p>Android 使用 Intent 主要是用来切换 Activity，和调用外部组件。 Flutter 里没有 Intent 的概念，但必要时仍可以通过  Flutter 提供的方法调用 native 层发送 Intent。</p>
<p>Flutter 使用 router 绘制新的 widget 从而达到切换 screen 的需求。这里有两个核心概念，同时也是 Flutter 提供用来管理多个 screen 的类：Router 和 Navigator。Router 是一个应用中对应 screen 或 page 的抽象（想想 Activity），Navigator 是一个用来管理 router 的  widget。Navigator  通过对 router 进行 push/pop  操作帮助用户在 screen 之间切换。</p>
<p>Flutter  中，可以将一个 Map<a href="name:String,router:Router">name:String,router:Router</a> 传给顶级 MaterialApp 实例：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> MaterialApp(</span><br><span class="line">    home: <span class="keyword">new</span> MyAppHome(), <span class="comment">// becomes the route named &#x27;/&#x27;</span></span><br><span class="line">    routes: &lt;<span class="built_in">String</span>, WidgetBuilder&gt; &#123;</span><br><span class="line">      <span class="string">&#x27;/a&#x27;</span>: (BuildContext context) =&gt; <span class="keyword">new</span> MyPage(title: <span class="string">&#x27;page A&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;/b&#x27;</span>: (BuildContext context) =&gt; <span class="keyword">new</span> MyPage(title: <span class="string">&#x27;page B&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;/c&#x27;</span>: (BuildContext context) =&gt; <span class="keyword">new</span> MyPage(title: <span class="string">&#x27;page C&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">就可以通过 Navigator 根据 router 的名字对 router 进行操作。</span><br><span class="line">```dart</span><br><span class="line">Navigator.of(context).pushNamed(<span class="string">&#x27;/b&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>Intent 的其他使用场景(比如启动相机，选择文件)，则需要创建中间层与 native 进行交互(或是用别人写好的库)。</p>
<p>See [Flutter Plugins] to learn how to build a native platform integration.</p>
<h2 id="Flutter-如何处理外部程序发来的-Intent"><a href="#Flutter-如何处理外部程序发来的-Intent" class="headerlink" title="Flutter 如何处理外部程序发来的 Intent"></a>Flutter 如何处理外部程序发来的 Intent</h2><p>Flutter 可以直接与 Android 层交互，获取共享的数据，从而处理外部发来的 Intent。</p>
<p>看例子：<br>基本流程就是先在 Android 端接收 text，然后等待 Flutter 通过 MethodChannel 请求将数据发送给它。</p>
<p>我们先在  AndroidManifest.xml 注册</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:launchMode</span>=<span class="string">&quot;singleTop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:theme</span>=<span class="string">&quot;@style/LaunchTheme&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:configChanges</span>=<span class="string">&quot;orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:hardwareAccelerated</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:windowSoftInputMode</span>=<span class="string">&quot;adjustResize&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- This keeps the window background of the activity showing</span></span><br><span class="line"><span class="comment">            until Flutter renders its first frame. It can be removed if</span></span><br><span class="line"><span class="comment">            there is no splash screen (such as the default splash screen</span></span><br><span class="line"><span class="comment">            defined in @style/LaunchTheme). --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:name</span>=<span class="string">&quot;io.flutter.app.android.SplashScreenUntilFirstFrame&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.SEND&quot;</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:mimeType</span>=<span class="string">&quot;text/plain&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>MainActivity 中，我们先从 intent 中取出数据，等待 Flutter 请求</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yourcompany.shared;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.flutter.app.FlutterActivity;</span><br><span class="line"><span class="keyword">import</span> io.flutter.plugin.common.ActivityLifecycleListener;</span><br><span class="line"><span class="keyword">import</span> io.flutter.plugin.common.MethodCall;</span><br><span class="line"><span class="keyword">import</span> io.flutter.plugin.common.MethodChannel;</span><br><span class="line"><span class="keyword">import</span> io.flutter.plugins.GeneratedPluginRegistrant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">FlutterActivity</span> </span>&#123;</span><br><span class="line">    String sharedText;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        GeneratedPluginRegistrant.registerWith(<span class="keyword">this</span>);</span><br><span class="line">        Intent intent = getIntent();</span><br><span class="line">        String action = intent.getAction();</span><br><span class="line">        String type = intent.getType();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Intent.ACTION_SEND.equals(action) &amp;&amp; type != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;text/plain&quot;</span>.equals(type)) &#123;</span><br><span class="line">                handleSendText(intent); <span class="comment">// Handle text being sent</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> MethodChannel(getFlutterView(), <span class="string">&quot;app.channel.shared.data&quot;</span>).setMethodCallHandler(<span class="keyword">new</span> MethodChannel.MethodCallHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMethodCall</span><span class="params">(MethodCall methodCall, MethodChannel.Result result)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (methodCall.method.contentEquals(<span class="string">&quot;getSharedText&quot;</span>)) &#123;</span><br><span class="line">                    result.success(sharedText);</span><br><span class="line">                    sharedText = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handleSendText</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        sharedText = intent.getStringExtra(Intent.EXTRA_TEXT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后，当 Flutter 渲染 view 时请求数据</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/services.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> SampleApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Sample Shared App Handler&#x27;</span>,</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">new</span> SampleAppPage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleAppPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  SampleAppPage(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _SampleAppPageState createState() =&gt; <span class="keyword">new</span> _SampleAppPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_SampleAppPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SampleAppPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> platform = <span class="keyword">const</span> MethodChannel(<span class="string">&#x27;app.channel.shared.data&#x27;</span>);</span><br><span class="line">  <span class="built_in">String</span> dataShared = <span class="string">&quot;No data&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    getSharedText();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(body: <span class="keyword">new</span> Center(child: <span class="keyword">new</span> Text(dataShared)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getSharedText() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sharedData = <span class="keyword">await</span> platform.invokeMethod(<span class="string">&quot;getSharedText&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (sharedData != <span class="keyword">null</span>) &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        dataShared = sharedData;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="那么-startActivityForResult"><a href="#那么-startActivityForResult" class="headerlink" title="那么 startActivityForResult?"></a>那么 startActivityForResult?</h2><p>Flutter 可以使用 Navigator 获取一个 router 返回的数据。直接 await 一个 push 的返回值。如下：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span> coordinates = <span class="keyword">await</span> Navigator.of(context).pushNamed(<span class="string">&#x27;/location&#x27;</span>);</span><br></pre></td></tr></table></figure><br>在位置选择 router 里，当用户操作完毕，就可以带着返回值 pop<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Navigator.of(context).pop(&#123;<span class="string">&quot;lat&quot;</span>:<span class="number">43.821757</span>,<span class="string">&quot;long&quot;</span>:<span class="number">-79.226392</span>&#125;);</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://flutter.io/flutter-for-android/&quot;&gt;https://flutter.io/flutter-for-android/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[toc]&lt;/p&gt;
    
    </summary>
    
      <category term="learn" scheme="https://invoker.me/categories/learn/"/>
    
    
      <category term="android" scheme="https://invoker.me/tags/android/"/>
    
      <category term="flutter" scheme="https://invoker.me/tags/flutter/"/>
    
      <category term="dart" scheme="https://invoker.me/tags/dart/"/>
    
  </entry>
  
  <entry>
    <title>kotlin 关于 iterator 和 sequence 的区别</title>
    <link href="https://invoker.me/kotlin-iterator-sequence/"/>
    <id>https://invoker.me/kotlin-iterator-sequence/</id>
    <published>2018-02-25T06:21:40.000Z</published>
    <updated>2025-06-29T04:49:36.613Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://discuss.kotlinlang.org/t/why-sequence-instead-of-iterator/1845/8">https://discuss.kotlinlang.org/t/why-sequence-instead-of-iterator/1845/8</a></p>
</blockquote>
<p>Iterator 是一个有状态的对象，因为它只保存当前遍历的信息。<strong>只能被遍历一次</strong>，没有措施阻止你对一个 iterator 进行多次操作，不容易发现代码中隐藏的错误。</p>
<p>sequence 是无状态的，你每进行一次遍历都会创建一个新的 iterator。如果一个 sequence 不支持重复遍历(比如一个 iterator 封装成的 sequence)，进行第二次遍历时你就拿不到 iterator 了。</p>
<p>sequence 比 iterator 更好，因为他的定义更清晰。推荐使用 Java8 的 Stream API 也是基于相同的理由。</p>
<hr>
<h4 id="sequence-的定义"><a href="#sequence-的定义" class="headerlink" title="sequence 的定义"></a>sequence 的定义</h4><blockquote>
<p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/index.html">https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/index.html</a></p>
</blockquote>
<p>sequence 的操作符按照 state requirements 可分为两组：</p>
<ul>
<li><p><strong>stateless</strong>: 无需外部状态，每个元素都是独立的，比如 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/map.html">kotlin.sequences.Sequence.map</a> ，<br><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/filter.html">kotlin.sequences.Sequence.filter</a> 或者需要一些常量做参数的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/take.html">kotlin.sequences.Sequence.take</a>，<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/drop.html">kotlin.sequences.Sequence.drop</a>。</p>
</li>
<li><p><strong>stateful</strong>: 需要辅助状态，通常与 sequence 中元素数量有关</p>
</li>
</ul>
<p>如果 sequence 操作符返回了一个 lazy 生成的 sequence，这种操作符被称为 <strong><em>intermediate</em></strong>，其他的被称为 <strong><em>terminal</em></strong>，比如 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/to-list.html">kotlin.sequences.Sequence.toList</a>, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/index.html#">kotlin.sequences.Sequence.max</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://discuss.kotlinlang.org/t/why-sequence-instead-of-iterator/1845/8&quot;&gt;https://discuss.kotlinlang.org/t/why-sequ
    
    </summary>
    
    
      <category term="kotlin" scheme="https://invoker.me/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>[翻译]使用 RxJava 构建 Android 复杂动画</title>
    <link href="https://invoker.me/translate-building-complex-android-animations-with-rxjava/"/>
    <id>https://invoker.me/translate-building-complex-android-animations-with-rxjava/</id>
    <published>2018-02-23T13:30:51.000Z</published>
    <updated>2025-06-29T04:49:36.619Z</updated>
    
    <content type="html"><![CDATA[<p>reddit 上刚看到这篇文章标题时我是这么想的，写点动画犯得着用 rx 吗？读完表示这么干确实不错。</p>
<blockquote>
<p>原文地址: <a href="http://zenandroid.io/building-complex-android-animations-with-rxjava/">http://zenandroid.io/building-complex-android-animations-with-rxjava/</a></p>
</blockquote>
<hr>
<p>本文将介绍如何使用 RxJava 优雅的设计 Android 动画，并结合 kotlin 的扩展方法，摆脱重复代码。效果就是下面这个动图。</p>
<p>[toc]</p>
<h4 id="What-we-are-trying-to-achieve"><a href="#What-we-are-trying-to-achieve" class="headerlink" title="What we are trying to achieve"></a>What we are trying to achieve</h4><p>目标效果如图：<br><img src="https://i.loli.net/2018/02/23/5a90182d6aedf.gif" alt=""></p>
<p>慢放：<br><img src="https://i.loli.net/2018/02/23/5a901832aeb57.gif" alt=""></p>
<p>简单描述下：</p>
<ul>
<li>两组菜单，分别包含三个子项 fab，每个子项都有对应的描述信息</li>
<li>一个大的 fab ，用于开启或关闭第一组菜单</li>
<li>用户点击第一组 fab 某项之后，显示第二组 fab 菜单</li>
<li>小 fab 入场动画： fab滑入的同时由小变大，就位后描述文字 fadein 出现</li>
<li>大 fab 自己还有旋转动画</li>
</ul>
<h4 id="The-classic-way-ViewPropertyAnimator"><a href="#The-classic-way-ViewPropertyAnimator" class="headerlink" title="The classic way: ViewPropertyAnimator"></a>The classic way: ViewPropertyAnimator</h4><p>实现动画最简单的方的就是使用 <code>ViewPropertyAnimator</code>  框架。它提供一系列简便的方式对 <code>单个 view</code> 执行动画。比如 fade out 一个 view：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view.animate().alpha(<span class="number">0</span>)  </span><br></pre></td></tr></table></figure><br>缩放：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">view.animate()  </span><br><span class="line">    .alpha(<span class="number">0</span>)</span><br><span class="line">    .scaleX(<span class="number">0.5f</span>)</span><br><span class="line">    .scaleY(<span class="number">0.5f</span>)</span><br></pre></td></tr></table></figure><br>非常方便，代码清晰明了。那如何将几个动画按顺序执行呢？</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">view.animate()  </span><br><span class="line">    .alpha(<span class="number">0</span>)</span><br><span class="line">    .scaleX(<span class="number">0.5f</span>)</span><br><span class="line">    .scaleY(<span class="number">0.5f</span>)</span><br><span class="line">    .withEndAction &#123;</span><br><span class="line">        secondView.animate()</span><br><span class="line">            .alpha(<span class="number">0</span>)</span><br><span class="line">            .scaleX(<span class="number">0.5f</span>)</span><br><span class="line">            .scaleY(<span class="number">0.5f</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>是不是不那么优雅了。就算用了 kotlin 提供的 lambda 表达式也没多大帮助。而我们将要实现的动画涉及到更多的步骤，如果光靠 <code>withEndAction</code> 嵌套来嵌套去一定会把人整疯。总之在这种复杂场景用起来相当费劲。</p>
<h4 id="Enter-RxJava"><a href="#Enter-RxJava" class="headerlink" title="Enter RxJava"></a>Enter RxJava</h4><p>进入正题啦。</p>
<p>每个动画自己就是一个异步操作。你启动了一个 animation，在几毫秒内执行一些任务，然后结束。我们当前只关心动画结束后启动另一个 animation 或是其他操作。</p>
<p>对应到 RxJava2 里，<code>Completable</code> 就是为这种操作而生的。</p>
<blockquote>
<p>RxJava2 直接提供了 <code>Completable</code>，使用 RxJava 1 也可以非常简单的实现这个组件。 </p>
</blockquote>
<p>基本要点就是用 <code>Completable</code> 来 warp 你的 animation，并在 <code>withEndAction</code> 里调用 <code>onComplete</code>。看代码：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> animation = Completable.create &#123;  </span><br><span class="line">        view.animate()</span><br><span class="line">            .alpha(<span class="number">0f</span>)</span><br><span class="line">            .withEndAction(it::onComplete)</span><br><span class="line">&#125;</span><br><span class="line">animation.subscribe()  </span><br></pre></td></tr></table></figure></p>
<p>包装后的代码功能上与原来相同，好处就是我们可以 RxJava提供的操作符将 animation （或者其他 RxJava 操作，比如网络请求）结合在一起。比如你想让两个动画先后执行可以使用 <code>andThen</code> ，同时执行可以使用 <code>Completable.mergeArray</code>。</p>
<p>比如在执行完一个 fade 后 fade 另一个 view<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> animation = Completable.create &#123;  </span><br><span class="line">        view.animate()</span><br><span class="line">            .alpha(<span class="number">0f</span>)</span><br><span class="line">            .withEndAction(it::onComplete)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> animation1 = Completable.create &#123;  </span><br><span class="line">        view1.animate()</span><br><span class="line">            .alpha(<span class="number">0f</span>)</span><br><span class="line">            .withEndAction(it::onComplete)</span><br><span class="line">&#125;</span><br><span class="line">animation.andThen(animation1).subscribe()  </span><br></pre></td></tr></table></figure></p>
<p>同时 fade 两个 view<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> animation = Completable.create &#123;  </span><br><span class="line">        view.animate()</span><br><span class="line">            .alpha(<span class="number">0f</span>)</span><br><span class="line">            .withEndAction(it::onComplete)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> animation1 = Completable.create &#123;  </span><br><span class="line">        view1.animate()</span><br><span class="line">            .alpha(<span class="number">0f</span>)</span><br><span class="line">            .withEndAction(it::onComplete)</span><br><span class="line">&#125;</span><br><span class="line">Completable.mergeArray(animation, animation1).subscribe()  </span><br></pre></td></tr></table></figure><br>当两个 view 的动画结束后，对另外两个 view 执行动画<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> animation = ...  </span><br><span class="line"><span class="keyword">val</span> animation1 = ...  </span><br><span class="line">Completable.mergeArray(animation, animation1)  </span><br><span class="line">       .andThen &#123; Completable.mergeArray(animation2, animation3) &#125;</span><br><span class="line">       .subscribe()</span><br></pre></td></tr></table></figure><br>看看，只要你熟悉 rxjava 的操作符，写这种动画变得多简单。一定记得调用 subscribe ，不然就不会动了。</p>
<p>本文的第一个任务已经完成了，但是从中还是能看到不少重复的代码，使用 kotlin 可以做到更好的效果。</p>
<h4 id="Bonus-using-Kotlin-extension-functions-for-animations"><a href="#Bonus-using-Kotlin-extension-functions-for-animations" class="headerlink" title="Bonus: using Kotlin extension functions for animations"></a>Bonus: using Kotlin extension functions for animations</h4><p>作者使用以下代码移除样板代码。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> View.<span class="title">fadeOut</span><span class="params">(duration: <span class="type">Long</span> = <span class="number">30</span>)</span></span>: Completable &#123;  </span><br><span class="line">    <span class="keyword">return</span> Completable.create &#123;</span><br><span class="line">        animate().setDuration(duration)</span><br><span class="line">                .alpha(<span class="number">0f</span>)</span><br><span class="line">                .withEndAction &#123;</span><br><span class="line">                    visibility = View.GONE</span><br><span class="line">                    it.onComplete()</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myView.fadeOut().subscribe()  </span><br></pre></td></tr></table></figure></p>
<p>可以到作者的这个项目里看看更多方法 <a href="https://github.com/acristescu/RxAnimationExample/blob/master/app/src/main/java/io/zenandroid/rxanimationexample/extensions/ViewExtensions.kt">ViewExtensions.kt</a></p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">longFab.slideIn(fabMiniSize).andThen(longLabel.fadeIn())  </span><br></pre></td></tr></table></figure>
<h4 id="Putting-it-all-together"><a href="#Putting-it-all-together" class="headerlink" title="Putting it all together"></a>Putting it all together</h4><p>让我们回到最开始的目标，实现这个动画。</p>
<p>分别命名两组 fab 为 <code>Speed Menu</code> 和 <code>Size Menu</code><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">showSpeedMenu</span><span class="params">()</span></span> = Completable.mergeArray(</span><br><span class="line">        fab.rotate(<span class="number">45f</span>),</span><br><span class="line">        longFab.slideIn(fabMiniSize).andThen(longLabel.fadeIn()),</span><br><span class="line">        normalFab.slideIn(<span class="number">2</span> * fabMiniSize).andThen(normalLabel.fadeIn()),</span><br><span class="line">        blitzFab.slideIn(<span class="number">3</span> * fabMiniSize).andThen(blitzLabel.fadeIn())</span><br><span class="line">)</span><br></pre></td></tr></table></figure><br>首先，同时启动了4个动画，并等待其结束：</p>
<ol>
<li>旋转大的 fab</li>
<li>第一个小 fab 滑入，label 渐入</li>
<li>第二个小 fab 滑入，label 渐入</li>
<li>第三个小 fab 滑入，label 渐入</li>
</ol>
<p>启动动画<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">showSpeedMenu().subscribe()  </span><br></pre></td></tr></table></figure></p>
<p>hide 和 show 很相似</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">hideSpeedMenu</span><span class="params">()</span></span> = Completable.mergeArray(</span><br><span class="line">        fab.rotate(<span class="number">0f</span>),</span><br><span class="line">        longLabel.fadeOut().andThen(longFab.slideOut(fabMiniSize)),</span><br><span class="line">        normalLabel.fadeOut().andThen(normalFab.slideOut(<span class="number">2</span> * fabMiniSize)),</span><br><span class="line">        blitzLabel.fadeOut().andThen(blitzFab.slideOut(<span class="number">3</span> * fabMiniSize))</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>最棒的地方来了，当你描述完所有动画后，可以将他们串在一起。下面这几行代码就实现了点击第一步显示的菜单后，隐藏菜单，显示子菜单的动画。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OnClick(R.id.blitz_fab, R.id.long_fab, R.id.normal_fab)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">onSpeedClicked</span><span class="params">()</span></span> &#123;</span><br><span class="line">    hideSpeedMenu()</span><br><span class="line">            .doOnComplete &#123; menuState = FabMenuState.SIZE &#125;</span><br><span class="line">            .andThen(showSizeMenu())</span><br><span class="line">            .subscribe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在，我们终于就可以轻松的将动画结合在一起，同时设置好 menu 状态。要是用原来的方法可不会这么容易。</p>
<p>关于 menu 状态的处理，目前的实现不是很优雅，如果你有什么建议可以在评论里告诉我~<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OnClick(R.id.fab)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">onFabClicked</span><span class="params">()</span></span> &#123;</span><br><span class="line">    menuState = <span class="keyword">when</span>(menuState) &#123;</span><br><span class="line">        FabMenuState.OFF -&gt; &#123;</span><br><span class="line">            showSpeedMenu().subscribe()</span><br><span class="line">            FabMenuState.SPEED</span><br><span class="line">        &#125;</span><br><span class="line">        FabMenuState.SPEED -&gt; &#123;</span><br><span class="line">            hideSpeedMenu().subscribe()</span><br><span class="line">            FabMenuState.OFF</span><br><span class="line">        &#125;</span><br><span class="line">        FabMenuState.SIZE -&gt; &#123;</span><br><span class="line">            hideSizeMenu().subscribe()</span><br><span class="line">            FabMenuState.OFF</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fadeOutMask.showIf(menuState != FabMenuState.OFF)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>完整代码 <a href="https://github.com/acristescu/RxAnimationExample/blob/master/app/src/main/java/io/zenandroid/rxanimationexample/MainActivity.kt">MainActivity.kt</a></p>
<h2 id="reddit-里的一些讨论-link"><a href="#reddit-里的一些讨论-link" class="headerlink" title="reddit 里的一些讨论 link"></a>reddit 里的一些讨论 <a href="https://www.reddit.com/r/androiddev/comments/7yuyma/building_complex_android_animations_with_rxjava">link</a></h2><ul>
<li>一个新的基于响应式设计的动画框架 <a href="https://github.com/material-motion/material-motion-android">material-motion-android</a></li>
<li><a href="https://github.com/PSPDFKit-labs/VanGogh/">VanGogh</a> 一个类似的动画库</li>
<li>也有人指出 <code>withEndAction</code> 只有在动画正常结束时才会被调用，有可能导致泄露</li>
<li>接上条，有人要加 <code>CompositeDisposable</code></li>
<li>接上条，也许存在一个回调函数比  <code>withEndAction</code> 更合适</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;reddit 上刚看到这篇文章标题时我是这么想的，写点动画犯得着用 rx 吗？读完表示这么干确实不错。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原文地址: &lt;a href=&quot;http://zenandroid.io/building-complex-android-anim
    
    </summary>
    
    
      <category term="android" scheme="https://invoker.me/tags/android/"/>
    
      <category term="rxjava" scheme="https://invoker.me/tags/rxjava/"/>
    
  </entry>
  
</feed>
